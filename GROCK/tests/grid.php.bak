<?

require_once("./config.php");
require_once("./util.php");

class Grid {

    var $entry_point; 	/**< the grid entry point, should not be needed */
    var $username;	/**< user name to use to connect to the grid */
    var $hostname;	/**< name of host that provides access to the grid */
    var $password;	/**< password to login on the UI node */
    var $passphrase;	/**< key to unlock the grid access certificate */
    var $work_dir;	/**< a local directory where we can work */
    var $error_log;	/**< a local file to store the error log */
    
    var $std_in;	/**< Internal. Standard input of the grid entry */
    var $std_out;	/**< Internal. Standard output of the grid entry */
    var $std_err;	/**< Internal. Standard error of the grid entry */
			// !!! IMPORTANT !!! either:
			//	a. set files to not hang on wait or
			//	b. remember to set them to no-hang when needed

    var $connected;	/**< Internal: Have we already connected?*/
    
    /**
     * Constructor for the class
     *
     * Set the values for the class variables using defaults provided in
     * 'config.php'
     *
     * These defaults can be overridden using the functions provided below.
     */
    function Grid() {
    	$this->entry_point = $GLOBALS['grid_server'];
	$this->username    = $GLOBALS['grid_user'];
	$this->hostname    = $GLOBALS['grid_host'];
	$this->password    = $GLOBALS['grid_password'];
	$this->passphrase  = $GLOBALS['grid_passphrase'];
	$this->work_dir    = $GLOBALS['grid_wd_path'];
	$this->error_log   = $GLOBALS['grid_error_log'];
	$this->connected   = FALSE;
    }
    
    // A C C E S S    V A R I A B L E    V A L U E S
    // Note: do we also need "get_XX" routines?

    /**
     * set the Grid user name
     *
     * @param user identity to use in the Grid UI host
     */
    function set_user($user)
    {
    	$this->username = $user;
	$this->entry_point=$user."@".$this->hostname;
    }
    
    /**
     * set the name of the Grid access host
     *
     * @param host name of the remote UI host
     */
    function set_host($host)
    {
    	$this->hostname = $host;
	$this->entry_point = $this->username."@".$host;
    }
    
    /**
     * set the password for the remote grid user/server
     *
     *	This is specific to the remote UI server selected.
     *
     * @param pass password needed to login on to the grid UI server
     */
    function set_password($pass)
    {
    	$this->password = $pass;
    }

    /**
     * set the passphrase for the remote grid user
     *
     *	This is grid-wise and independent of the UI-node used.
     *
     * @param pass passphrase needed to unlock the grid certificate
     */
    function set_passphrase($pass)
    {
    	$this->passphrase = $pass;
    }
    
    /**
     * set working directory on the Grid server
     *
     * @param work_dir the remote path of the working directory
     */
    function set_work_dir($wd)
    {
    	$this->work_dir=$wd;
    }
    
    /**
     * set error log
     *
     * @param errlog path to a local file where we will store the error log
     *		     (i.e. stderr of the grid connection)
     */
    function set_error_log($errlog)
    {
    	$this->error_log = $errlog;
    }
    
    // C O N N E C T    T O    T H E    U S E R    I N T E R F A C E
    
    /**
     * open a connection to the Grid UI server
     * 
     * 	The Grid User Interface Server is the entry point to the Grid
     *  for users and user applications. This is where jobs are launched from.
     * 
     * 	This package has been designed to be able to be installed in any
     *  host, independent of whether it is an UI or not. Thus, to be able to
     *  submit jobs to the Grid, the server hosting the Web UI must connect to
     *  a Grid UI host to do the work.
     * 
     * 	This routine opens a connection to a Grid UI host using an specified
     *  username (i.e. all jobs will be run under said username). To allow the
     *  caller to communicate with the remote end, it creates two pipes/pty, one for
     *  input and one for output, and redirects error messages to a file.
     *
     *  We need to redirect stderr to a file. This is so to avoid blocking on
     *  reading to check for errors and to avoid (if we use PTYs) interleave
     *	of error messages and normal I/O.
     * 
     * 	These pipes lead to a child process that actually manages the 
     *  communication. Using a child process has several advantages: it simplifies
     *  the communication process by offloading the comm. logic to a separate,
     *  convenience tool, and by being able to use SSH as the child, we can increase
     *  security taking advantage of its encryption capabilities.
     * 
     * 	The panorama therefore will look like this:
     * 
     * 	HTML front-end --> processor.php <--> SSH <--> remote host <--> Grid
     */

    function connect()
    {	
    	global $php_version;
	global $debug;
	
	// Open a child process with the 'proc_open' function. 
	//
	// Some tricks: we must open the connection using '-x' to disable
	// X11 forwarding, and use '-t -t' to avoid SSH generating an error
	// because we are not connected to any terminal.
    	// NOTE:
	//   We require require users to have an account and password on
	//   the UI and provide their user/password through the web or
	//   otherwise (e.g. using myproxy)
    	//
	// NOTE: if the web server is trusted remotely (i.e. it's SSH public 
	// key is accepted in ~user@host:.ssh/authorized_keys) then any 
	// password will do.
	if ($php_version < 5) {
	    $descriptorspec = array(
        	0 => array("pipe", "r"),  // connect child's stdin to the read end of a pipe
        	1 => array("pipe", "w"),  // connect child's stdout to the write end of a pipe
        	2 => array("file", $this->error_log, "a") // stderr is a file to write to
	    );
	    $this->process = proc_open("SSH/SSH.sh $this->entry_point", 
	    		     $descriptorspec,
			     $pipes);
	    if ($debug) echo "SSH/SSH.sh $this->entry_point<br />\n";
	    // check status
	    if (!is_resource($this->process)) 
	    {
		letal("Grid::connect", "cannot connect to the Grid");
		return $this->connected = FALSE;
	    }
	    if ($debug) echo "proc_open<br />\n";
	    // give SSH it's due password
	    // XXX - this might be better..
	    fwrite($pipes[0], "$this->password\n");
	    if ($debug) echo "$this->password<br />\n";
	    fflush($pipes[0]);
	 
	}
	else { 	/* php5 -- we can use PTYs */
		/* XXX -- untested -- probably unneeded */
	    $descriptorspec = array(
		0 => array("pty"),
		1 => array("pty"),
		2 => array("file", $this->error_log, "a")
	    );
	    $this->process = proc_open("ssh -x -t -t $this->entry_point", 
	    	    	     $descriptorspec,
			     $pipes);
		
	    // check status
	    if (!is_resource($this->process)) 
	    {
		letal("Grid::connect", "cannot connect to the Grid");
		return $this->connected = FALSE;
	    }

	    $status = proc_get_status($this->process);
	    if ($status->running == FALSE) {
		fclose($pipes[0]); fclose($pipes[1]); fclose($pipes[2]);
		proc_close($this->process);
		letal("Grid::connect", "connection exited ".$status->exitcode);
		return $this->connected = FALSE;
	    }
	    if ($status->signaled) {
		fclose($pipes[0]); fclose($pipes[1]); fclose($pipes[2]);
		proc_close($this->process);
		letal("Grid::connect", "connection terminated by ".$status->termsig);
		return $this->connected = FALSE;
	    }
	    if ($status->stopped) {
		// Tell the user and hope for the best
		warning("Grid::connect stopped by ".$status->stopsig.
		" it may still have a chance though");
	    }

	    // Give ssh it's due password
	    $dummy = fgets($pipes[1],1024);	/* wait for prompt */
	    if ($debug) echo $dummy."<br />\n";
	    fwrite($pipes[0], "$this->password\n");
	    fflush($pipes[0]);

	}
	
	// $pipes now looks like this:
	//   0 => writeable handle connected to child stdin
	//   1 => readable handle connected to child stdout
	// Any error output will be appended to $wd_path/error-output.txt
    	$this->std_in = $pipes[0];
	$this->std_out = $pipes[1];
	$this->std_err = fopen($this->error_log, "r");

	// We now have a connection to the remote Grid User Interface
	// Server which we may use to send commands/receive output
	return $this->connected = TRUE;
    }

    /**
     * Close the connection with the remote Grid access point (UI node)
     *
     * 	What we are going to do is close the communication pipes
     *  and kill the child process that actually handles communication
     *  with the remote Grid UI host (ssh).
     *  This function returns the exit status of the connection (i.e. of
     *	the intermediate program that handles the connection --in this
     *  case SSH).
     *
     *  @return integer exit status of the connection (or the handling program)
     */
    function disconnect()
    {
	if ($this->connected == FALSE)
		return $ret = 0;

	// We need to close the 'child' process, otherwise the call to
	// the 'proc_close()' function hangs!!!
	fwrite($this->std_in, "logout\n");
	fflush($this->std_in);

	fclose($this->std_in);

	// The output from the commands
	//  Note that this may
	//  	a) disrupt normal output
	//  	b) get into an infinite loop if the child is in one
	//  But it is useful for debugging, hence here.
    	if ($debug == TRUE)
	    do {
    	    
		$line = fgets($this->std_out, 1024);
		echo $line."<br />\n";
	    } while (!feof($this->std_out) && (strlen($line) != 0));

	fclose($this->std_out);

    	if ($debug == TRUE)
    	    do {
    	    
		$line = fgets($this->std_err, 1024);
		echo $line."<br />\n";
	    } while (!feof($this->std_err) && (strlen($line) != 0));

	fclose($this->std_err);

	// It's important that we close any open files before calling
	// proc_close in order to avoid a deadlock

	$return_value = proc_close($this->process);
	
	$this->connected = FALSE;

	return $return_value;	
    }
    
    // I D E N T I F Y    T O    T H E    G R I D
    
    /**
     * Start the Grid services
     *
     *	This function starts the grid services on the remote UI server host.
     *	This is done by unlocking the certificate that we are going to use 
     *  to run our jobs on the grid using the passphrase provided.
     *
     *	We need to have a connection open with the remote grid server as the 
     *  user with whose identity we want to run the jobs. This connection is
     *	created by Grid::connect().
     *
     *	To ease things up, we check if we are already connected, and if we
     *	aren't, we try to connect ourselves. That is, there is no need to
     *	call Grid::Connect() first unless you want to do something else
     *	on the Grid-UI before initializing the Grid.
     *
     */
    function initialize()
    {
    	// NOTE: add this once the $errfile parameter has been removed
	if ($this->connected == FALSE)
		$this->connect();
	
	// Remote EGEE middleware interaction
	// We run the Globus and Middleware commands in the User Interface, but 
	// the output goes to the remote machine in the current directory
	fwrite($this->std_in, "grid-proxy-init  -pwstdin\n");
	fflush($this->std_in);
	if ($debug) {
	    echo fgets($this->std_out, 1024)."<p>";	// last (should have been eaten
						    // by connect() )
	    echo fgets($this->std_out, 1024)."<p>";	// command
	    echo fgets($this->std_out, 1024)."<p>"; // whoami
	} else {
	    fgets($this->std_out, 1024);	// this one should not be needed
	    fgets($this->std_out, 1024);
	    fgets($this->std_out, 1024);
	}
	fwrite($this->std_in, "$this->passphrase\n");
	fflush($this->std_in);
	if ($debug) {
		echo"<p><hr><p>";
		echo fgets($this->std_out, 1024)."<p>"; // password
		echo fgets($this->std_out, 1024)."<p>"; // creating...
		echo fgets($this->std_out, 1024)."<p>"; // validity
	} else {
	    fgets($this->std_out, 1024);    // remove passphrase from std_out
//	    fgets($this->std_out, 1024);
//	    fgets($this->std_out, 1024);
	}
    	// The output from grid-proxy-init will go to the session log
	// in std_out
	// Make sure it is read or the child may block on writing.
    }

    /**
     *	Destroy remote grid identity
     *
     *	We destroy the certification we initialized so that no more jobs
     *	can be launched under our identity.
     *
     *	@param pipes	The set of pipes to communicate (stdin/stdout) with
     *	    	    	the remote grid server entry point
     */
    function destroy()
    {
    	fwrite($this->std_in, "grid-proxy-destroy\n");
	fflush($this->std_in);
    	
	// The output from grid-proxy-destroy will go to the session log
	// in std_out. There should be none.
	// Make sure it is read or the child may block on writing.

    }

    // J O B    M A N I P U L A T I O N
    // For the moment these are just stubs to be filled in
    //
    // Job structure:
    //	locally we create a temporary directory containing everything
    //	needed to run the job, with a 'job.jdl' file inside.
    //	We pack the job directory into $directory.tgz (where $directory
    //  is the unique name of the temporary directory)
    //	Then send the pack to the remote server. To simplify we supply
    //	$directory as parameter, since we know the pack will be called
    //	$directory.tgz
    //	Supplying the dir name allows us to know the dir name into which
    //  the pack contents will extract, and hence to control the remote
    //  files.
    //
    //  E.g. the dynamic logic is more or less
    //	    create locally random_name directory
    //	    create in $random_name the files needed
    //	    scp -rC $random_name  gr_user@gr_host:somedir/
    //	    [ssh] edg-submit-job somedir/$random_name/job.jdl
    //	    ...
    //	    check job status until complete
    //	    ..
    //	    [ssh] pack results (if needed) into output.tgz
    //	    scp gr_user@gr_host:somedir/output.tgz $random_name
    //	    tar -zxvf $random_name/output.tgz
    
    /**
     * Submit a job to the Grid
     *
     * @note STUB. DO NOT USE YET
     */
    function job_submit($job)
    {
    	// Take a job package and submit it to the Grid
	//  Job package:
	//  	everything needed to run the job
	//
	// 1. copy the job package to the grid server
	
	fwrite($this->std_in, "mkdir $this->work_dir");
	create_remote_tmp_dir();
	fwrite($this->std_in, "cd $temporary_dir");
	fflush($this->std_in);
	system("scp -rC $job $this->entry_point:$this->work_dir\n", $status);
	if ($status > 0)
	    letal("Job submission", "Can't copy job to Grid server");
	
    	// 2. submit job to the grid
	fwrite($this->std_in, "edg-job-submit"
	    	    	    . "  -o $this->work_dir/$job/job.id"
	    	    	    . "  $this->work_dir/$job/job.jdl"
	    	    	    . "  > $this->work_dir/$job/submit.out");
    	fflush($this->std_in);
	
    }
    
    function job_get_id($job)
    {
    	// XXX first we should check that job.id exists
	// there are two possible scenarios:
	//  mistake - we are called without first calling job_submit
	//  correct - we are called after job_submit: then
	//  	- job_submit has completed -- job.id exists
	//  	- job_submit has NOT completed -- job.id does'n exist yet
	//  	  but submit.out does
	
	// check submit.out exists: if not, then warn user
	
	// check job.id exists: if not wait/warn user

    	// OK, go for it
    	$job_id="";
	$lines=file("$this->work_dir/$job/job.id");
	$job_id=$lines[1];
	$job_id=rtrim("$job_id");
	
	return $job_id;
    }

    /**
     * check job status
     *
     * @note STUB. DO NOT USE YET
     */
    function job_status($job)
    {
    	$job_id = $this->job_get_id($job);
    	fwrite($this->std_in, "edg-job-status $job_id > $this->work_dir/$job/job.stat\n");
	fflush($this->std_out);
//...
    }
    
    /**
     * retrieve results
     *
     * @note STUB. DO NOT USE YET
     */
    function job_retrieve($job)
    {
    	// get output pack
	system("scp $this->entry_point:$work_dir/$job/output.tgz .");
	system("tar -zxvf output.tgz");
    }
}
?>

