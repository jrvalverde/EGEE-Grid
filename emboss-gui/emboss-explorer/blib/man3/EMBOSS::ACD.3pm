.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "EMBOSS::ACD 3"
.TH EMBOSS::ACD 3 "2005-10-27" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
EMBOSS::ACD \- parse EMBOSS ACD (AJAX Command Definition) files
.SH "AUTHOR"
.IX Header "AUTHOR"
Luke McCarthy <lukem@gene.pbi.nrc.ca>
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use EMBOSS::ACD;
.Ve
.PP
.Vb 1
\&  $acd = EMBOSS::ACD->new($acdfile);
.Ve
.PP
.Vb 1
\&  $application = $acd->name;
.Ve
.PP
.Vb 1
\&  $description = $acd->documentation;
.Ve
.PP
.Vb 1
\&  @groups = $acd->groups;
.Ve
.PP
.Vb 5
\&  foreach $parameter ($acd->param) {
\&        while (($attribute, $value) = each %$parameter) {
\&                ...
\&        }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1EMBOSS::ACD\s0 parses \s-1EMBOSS\s0 Ajax Command Definition files and provides
object-oriented access to the data contained therein.
.PP
For a complete specification of the \s-1ACD\s0 format, see
http://emboss.sourceforge.net/developers/acd
.PP
Note that no checks are performed to ensure that the \s-1ACD\s0 file is semantically
valid.  Specifically, datatypes and attributes that aren't defined in the
specification can occur in the file and will be parsed as normal.  This is a
good thing, as the module remains useful even if new datatypes are added by
local developers or the \s-1EMBOSS\s0 crew.
.PP
Public methods are described below:
.IP "new($acdfile)" 4
.IX Item "new($acdfile)"
Parses the specified \s-1ACD\s0 file.  Returns a new \s-1EMBOSS::ACD\s0 object on success,
and dies on failure.
.Sp
$acdfile is the full path to a valid \s-1ACD\s0 file.
.IP "\fIname()\fR" 4
.IX Item "name()"
Returns the name of the application whose \s-1ACD\s0 file was parsed.
.IP "\fIdocumentation()\fR" 4
.IX Item "documentation()"
Returns a short description of the application whose \s-1ACD\s0 file was parsed.
.IP "\fIgroups()\fR" 4
.IX Item "groups()"
Returns a list of functional groups to which the application belongs.  For a
list of possible groups, see
http://emboss.sourceforge.net/developers/acd/syntax.html#sect2214
.IP "param($param)" 4
.IX Item "param($param)"
Returns a reference to a hash describing the specified parameter.  The hash
contains key-value pairs corresponding to the attributes specified in the \s-1ACD\s0
file, plus the keys 'name' and 'datatype'.  The value of the 'datatype' key is
the canonical name of the data type, regardless of any abbreviation in the \s-1ACD\s0
file.  For a list of possible data types, see
http://emboss.sourceforge.net/developers/acd/syntax.html#sect23
.Sp
If no parameter is specified, a list of all parameters is returned.  The
members of the list are hash references as described above.
.Sp
Note that, in accordance with the \s-1ACD\s0 specification, attribute names are not
expanded if they are abbreviated in the \s-1ACD\s0 file.
.Sp
$param is either undefined (see above) or the name of the desired parameter.
.IP "canonical_datatype($datatype)" 4
.IX Item "canonical_datatype($datatype)"
Returns the canonical name of the specified abbreviated datatype, or undefined
if the abbreviation is ambiguous or not recognized.
.SH "BUGS"
.IX Header "BUGS"
None that I know of...
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2004 Luke McCarthy.  All rights reserved.  This program is free
software.  You may copy or redistribute it under the same terms as Perl itself.
