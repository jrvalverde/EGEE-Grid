<?
	$descriptorspec = array(
        	0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
        	1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
        	2 => array("file", "$grid_path/error-output.txt", "a") // stderr is a file to write to
	);
	
	
	$process = proc_open("bash", $descriptorspec, $pipes);
	
	fwrite($pipes[0], "whoami\n");
	fwrite($pipes[0], "pwd\n");

	fwrite($pipes[0], "su - david\n");
	sleep(5);     
	fwrite($pipes[0], "miseria2004\n");

	fwrite($pipes[0], "whoami\n");
	fwrite($pipes[0], "pwd\n");
	
	// Required to close the 'child' process, otherwise 'proc_close' function hangs!!!
	fwrite($pipes[0], "exit\n");

	fclose($pipes[0]);

	// The output from the commands
	// Uncomment to debug the 'child' process!!!
	
	while (!feof($pipes[1]))
	{
		echo fgets($pipes[1], 1024)."<br />";
	}
	
	fclose($pipes[1]);

	// It's important that you close any pipes before calling
	// proc_close in order to avoid a deadlock
	$return_value = proc_close($process);
	
	echo "\ncommand returned $return_value\n";
	
?>
