# Define DDEFS when calling make if you want to produce SMALL or HUGE 
# (as opposed to medium) sized MODELLER; for example:
#
# To do: use ${MAKE} instead of make for recursive calls
# (may not work for all make programs);
#

SHELL=/bin/sh

.PHONY: default clean distclean depend install

.SUFFIXES: .F90 .o .mod .cpp .stb

# the exception here is only temporary to take care of Absoft's sensitivity

.F90.o:
	@if [ `echo "rdlib_routines getdata_routines mdt_routines energy make_restraints top_act build_model atom_residue_routines compare_routines patch" | grep ${*F} | wc -l` -eq 1 \
	      -a $${COMPILER} = "i386-absoftd" ] ; then \
	    echo "${FC} -I../include -Df95 -en -M52 -B111 -g -c $*.F90 -o $*.o" ; \
	    ${FC} -I../include -Df95 -en -M52 -B111 -g -c $*.F90 -o $*.o ; \
        else \
	    echo "${FC} ${INCLUDE} ${DDEFS} ${FFLAGS} -c $*.F90 -o $*.o" ; \
	    ${FC} ${INCLUDE} ${DDEFS} ${FFLAGS} -c $*.F90 -o $*.o ; \
	fi

# would need to run with make -i
#	if [ $${?}  !or!  $? -ne 0 ] ; then f90 -I../include -en -M52 -B111 -g -c $*.F90 -o $*.o ; fi

# $*     ... directory/root
# $<     ... directory/root.source
# $@     ... directory/root.target
# ${*F}  ... filename part (* can also be < or @)
# ${*D}  ... directory part (* can also be < or @)

# @ before command does not print it on STDOUT
# - before command continues with execution even if an error

# ---------------------------------------------------------------------
# These are level 1 targets:

default: opt

help:
	@echo "This Makefile will compile a single program with an appropriate "
	@echo "compiler, provided that the EXECUTABLE_TYPE6v2 environment variable is defined."
	@echo ""
	echo "Current EXECUTABLE_TYPE6v2: $${EXECUTABLE_TYPE6v2}"
	@echo ""
	@echo "   make help        to print this message"
	@echo "   make deb         to compile with all debugging options"
	@echo "   make opt         to compile with all optimizing options"
	@echo "   make clean       to remove object files on current host"
	@echo "   make cleaner     to remove object files and executable on current host"
	@echo "   make distclean   to remove everything but sources"
	@echo "   make install     to install the executable"
	@echo "   make depend      to create the dependency list (uppercase: SGI, Absoft)"
	@echo "   make depend_nag  to create the dependency list (lowercase: NAG, PGI)"
	@echo ""

# We are using recursive make here because the shell $${} variables only retain
# their values within one shell line. So, for these shell variables to be 
# passed to other parts of make, we have to call make with arguments that
# assign the shell $${} variables to new make ${} variables.

deb: update_head
	@echo "COMPILING: " ${PROGRAM} "  ON  " $${EXECUTABLE_TYPE6v2} "  \
	DEBUGGING"
	make -f Makefile "COMPILER=$${EXECUTABLE_TYPE6v2}d" flags
#	mv ${PROGRAM} ${PROGRAM}_$${EXECUTABLE_TYPE6v2}
	size ${PROGRAM}_$${EXECUTABLE_TYPE6v2}

opt: update_head
	@echo "COMPILING: " ${PROGRAM} "  ON  " $${EXECUTABLE_TYPE6v2} "   \
	OPTIMIZING"
	@echo
	make -f Makefile "COMPILER=$${EXECUTABLE_TYPE6v2}" flags
#	mv ${PROGRAM} ${PROGRAM}_$${EXECUTABLE_TYPE6v2}
	size ${PROGRAM}_$${EXECUTABLE_TYPE6v2}

clean: rmhostobj

cleaner: rmhostobj rmhostexec rmmisc

cleanobj: rmallobj rmmisc

distclean: rmallobj rmallexec rmmisc

rmhostobj:
	-rm -r *.fdb *.lnt *.stt *.tre *.xrf ../*/*.stb ../*/*.cpp ../*/*.o ../*/*.mod *.bif *.int Makefile.old tnm0* /tmp/*.g90 ./*g90

rmhostexec:
	EXEC=${PROGRAM}_$${EXECUTABLE_TYPE6v2} ; \
	if [ -f $${EXEC} ] ; then rm $${EXEC} ; fi

rmallobj: rmhostobj

rmallexec:
	-rm ${PROGRAM}_*

rmmisc:
	-rm -r test0* *.old *.bak *.bif ../*/*.Ff ../*/*.ln ../*/*.f
	-rm *.out all.chk
	find ../../ -name '.jotcruft*' -exec /bin/rm {} \; -print
	-rm .jot_craft* selected.chk Makefile.old \#*\# 
	-rm *~?~ *.ana *.bak *.ps *.aux *.toc *.log core

# for the PGI pgf90 and NAG F95 compilers (lower case .mod filenames):
depend_nag: ${SOURCES}
	../../INT/sfmakedepend ${INCLUDEDIR} ${SOURCES}
	sed -e "s/f90_unix_proc.mod//g" -e "s/f90_unix_env.mod//g" Makefile > M;mv M Makefile

# for the Absoft and SGI f90 compilers (upper case .mod filenames):
depend: ${SOURCES}
	../../INT/sfmakedepend -h ${INCLUDEDIR} ${SOURCES}
	sed -e "s/F90_UNIX_PROC.mod//g" -e "s/F90_UNIX_ENV.mod//g" Makefile > M;mv M Makefile

update_head:
	perl -i -pe 's#^(\s+datetag\s*=\s*).*#\1'"'""`date +%m/%d/%Y' '%T`""'"'# if /^\s+datetag\s*=/' top_mod.F90

install: 
	if [ ! -d ${BINDIR}  ] ; then ${MKDIRS} ${BINDIR} ; fi
	if [ ! -d ${LIBDIR}  ] ; then ${MKDIRS} ${LIBDIR} ; fi
	-if [ `echo ${BINFILES} | wc -w` -gt 0 ] ; then cp ${BINFILES} ${BINDIR}; fi
	-if [ `echo ${LIBFILES} | wc -w` -gt 0 ] ; then cp -r ${LIBFILES} ${LIBDIR}; fi
	-cp ${PROGRAM}_$${EXECUTABLE_TYPE6v2} ${BINDIR}/${PROGRAM}_$${EXECUTABLE_TYPE6v2}; \
	strip ${BINDIR}/${PROGRAM}_$${EXECUTABLE_TYPE6v2}
	-cp ${PROGRAM} ${BINDIR}/${PROGRAM}
	chmod a+rwx ${BINDIR}
	chmod a+rwx ${LIBDIR}
	chmod a+rw ${BINDIR}/*
	chmod a+rw ${LIBDIR}/*
	chmod a+rwx ${BINDIR}/${PROGRAM} ${BINDIR}/${PROGRAM}_$${EXECUTABLE_TYPE6v2}


# Select the right compilation flags given COMPILER selection. The whole 
# selection has to be on one line because shell variables FC and FFLAGS are
# only valid on one line. 
#

# -B100  ... for Pentium Pro optimization, not run on other Pentiums
# -B101  ... for Pentium Pro optimization, but also run on other Pentiums

# SGI: ip28 is R10000 on Solid Impact Indigo; Origin 2000 is ip27
# use iris4 for producing SGI version that is distributed on the web

#       set DECFORT_DEBUG=T; export DECFORT_DEBUG; \
#       FOR LATEST XLF 4.x COMPILER: add -qinitauto=00 option for debugging


flags:
	@case ${COMPILER} in \
	r10000) FC=f90;   FFLAGS="-macro_expand -automatic -r10000 -mips4 -O3 -pfa -Ofast=ip27 -TARG:platform=ip27 -n32 -LNO -IPA -OPT:roundoff=3:IEEE_arith=1"; LDFLAGS="-lfastm" ;; \
	r10000d) FC=f90;   FFLAGS="-woff52 -g -O0 -DEBUG:trap_uninitialized=ON:div_check=3:subscript_check=ON:verbose_runtime=ON -ansi -automatic -64 -r10000 -mips4"; LDFLAGS="-lmalloc -cv -lfpe";; \
	iris4d) FC=f90;   FFLAGS="-O2 -mips3 -woff52 -automatic"; LDFLAGS="" ;; \
	iris4dd) FC=f90;   FFLAGS="-woff52 -mips3 -g -O0 -DEBUG:trap_uninitialized=ON:div_check=3:subscript_check=ON:verbose_runtime=ON -ansi -automatic -mips3"; LDFLAGS="-lmalloc -cv -lfpe";; \
	i386-nag)     FC=nag_f95;  FFLAGS="-Df95 -DNAG -DNAGBUG1 -kind=byte -ieee=full -O3 -maxcontin=40"; LDFLAGS="-Bstatic";; \
	i386-nagd)    FC=nag_f95;  FFLAGS="-Df95 -DNAG -DNAGBUG1 -kind=byte -ieee=nonstd -strict95 -g -g90 -gline -C -maxcontin=40"; LDFLAGS="-Bstatic";; \
	i386-pgi)     FC=pgf90;   FFLAGS="-fast"; LDFLAGS="";; \
	i386-pgid)    FC=pgf90;  FFLAGS="-g"; LDFLAGS="";; \
	mac10v1-absoft) FC=f95; FFLAGS="-N11 -Df95 -M52 -O -B100"; LDFLAGS="-lU77 -lV77";; \
	mac10v1-absoftd)  FC=f95;  FFLAGS="-N11 -Df95 -en -M52 -B111 -g -Rb -Rc -Rs -Rp"; LDFLAGS="-lU77 -lV77";; \
	mac10v2-absoft) FC=f95; FFLAGS="-N11 -Df95 -M52 -O -B100"; LDFLAGS="-lU77 -lV77";; \
	mac10v2-absoftd)  FC=f95;  FFLAGS="-N11 -Df95 -en -M52 -B111 -g -Rb -Rc -Rs -Rp"; LDFLAGS="-lU77 -lV77";; \
	i386-absoft) FC=f95; FFLAGS="-Df95 -M52 -O -B100"; LDFLAGS="-X -static -lU77 -lV77";; \
	i386-absoftd)  FC=f95;  FFLAGS="-Df95 -en -M52 -B111 -g -Rb -Rc -Rs -Rp"; LDFLAGS="-X -static -lU77 -lV77";; \
	i386-lf) FC=lf95; FFLAGS="-Df95 --ntrace"; LDFLAGS="";; \
	i386-lfs) FC=lf95; FFLAGS="-Df95 --ntrace --staticlink"; LDFLAGS="";; \
	i386-lfd) FC=lf95; FFLAGS="-Df95 --ap --chkglobal -g --pca --sav --info --xref"; LDFLAGS="";; \
	hp9000s700) FC=f77;   FFLAGS="+e -O +U77";; \
	hp9000s700d) FC=f77;   FFLAGS="+e -g -C +U77";; \
	f90) FC=f90;   FFLAGS="-automatic -r10000 -mips4 -O2 -n32 -LNO -IPA -OPT:roundoff=3:IEEE_arith=1"; LDFLAGS="-lfastm" ;; \
	f90d) FC=f90;   FFLAGS="-automatic -r10000 -mips4 -g -C -O0";; \
	sol2) FC=f90;   FFLAGS="-O3 -xchip=ultra -xarch=v8plus"; LDFLAGS="";; \
	sol2d) FC=f90;   FFLAGS="-O -g -xchip=ultra -xarch=v8plus"; LDFLAGS="";; \
	sun4) FC=f90;   FFLAGS="-O3 -dn"; LDFLAGS="";; \
	sun4d) FC=f90;   FFLAGS="-g -C -ansi -w4 -dn"; LDFLAGS="";; \
	alpha) FC=f90;   FFLAGS="-DALPHA -O5 -assume dummy_aliases -fast -om -non_shared -cpp";; \
	alphad) FC=f90;   FFLAGS="-DALPHA -g -C -fpe4 -assume dummy_aliases -check format -check output_conversion -check overflow -check underflow -synchronous_exceptions -warn argument_checking -cpp";; \
        rs6000) FC=xlf90;   FFLAGS="-O3  -qfloat=hsflt -qfloat=nofltint -qfloat=norndsngl -qcharlen=4096 -qAUX_SIZE=16384 -qsuffix=f=90 -qsuffix=cpp=F90 -q nolm -qmaxmem=-1 "; LDFLAGS=" -bmaxdata:0x60000000 " ;; \
        rs6000d) FC=xlf90;   FFLAGS="-bnoquiet -C -g -qextchk -qflttrap -qnosave -qspnans -qcharlen=4096 -qAUX_SIZE=16384 -qxflag=dd24 -qinitauto=00 -qsuffix=f=90 -qsuffix=cpp=F90 -qnolm -qmaxmem=8192";; \
	*) FC=f90;   FFLAGS="-g";; \
	esac ; \
	make -f Makefile "FC=$${FC}" "FFLAGS=$${FFLAGS}" \
		"LDFLAGS=$${LDFLAGS}" ${PROGRAM}


# Linking rule:

${PROGRAM}: ${OBJECTS}
	${FC} ${FFLAGS} ${OBJECTS} ${LDFLAGS} -o ${PROGRAM}_$${EXECUTABLE_TYPE6v2}

flint:
	flint -Sflint -Bflint -fgmpstuwx+ -Xlinenumbers -W132 ${INCLUDE} ${DDEFS} ${FILES}
