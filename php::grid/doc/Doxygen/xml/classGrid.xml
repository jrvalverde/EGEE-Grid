<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.3.6">
  <compounddef id="classGrid" kind="class" prot="public">
    <compoundname>Grid</compoundname>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGrid_1a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::Grid</definition>
        <argsstring>()</argsstring>
        <name>Grid</name>
        <briefdescription>
<para>Constructor for the class. </para>        </briefdescription>
        <detaileddescription>
<para>Set the values for the class variables using defaults provided in &apos;config.php&apos;</para><para>These defaults can be overridden using the functions provided below.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $eg = new Grid; if ($eg == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; </computeroutput> </para><para><simplesect kind="return"><para>Grid a new instance of a Grid class object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="399" bodystart="399" bodyend="414"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::destruct</definition>
        <argsstring>()</argsstring>
        <name>destruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="416" bodystart="416" bodyend="431"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::set_user</definition>
        <argsstring>($user)</argsstring>
        <name>set_user</name>
        <param>
          <type>$</type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>set the Grid user name </para>        </briefdescription>
        <detaileddescription>
<para>In order to connect to the Grid and be able to submit jobs we need a tuple (host/user/password/passphrase), i.e. an entry point to log in, and a passphrase to unlock the grid certificate.</para><para>This method allows us to define the username which will be used to log in on the grid, i.e. how do we identify ourselves to the Grid UI host.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $user=&quot;user&quot;;</computeroutput> </para><para><computeroutput> $eg = new Grid; if ($eg == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; $eg-&gt;set_user($user); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>user identity to use in the Grid UI host </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="465" bodystart="464" bodyend="472"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::set_host</definition>
        <argsstring>($host)</argsstring>
        <name>set_host</name>
        <param>
          <type>$</type>
          <declname>host</declname>
        </param>
        <briefdescription>
<para>set the name of the Grid access host </para>        </briefdescription>
        <detaileddescription>
<para>In order to connect to the Grid and be able to submit jobs we need a tuple (host/user/password/passphrase), i.e. an entry point to log in, and a passphrase to unlock the grid certificate.</para><para>This method allows us to define the entry point to use to gain access to the Grid.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $host=&quot;gridui.example.com&quot;;</computeroutput> </para><para><computeroutput> $eg = new Grid; if ($eg == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; $eg-&gt;set_host($host); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>host name of the remote UI host </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="502" bodystart="501" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::set_password</definition>
        <argsstring>($pass)</argsstring>
        <name>set_password</name>
        <param>
          <type>$</type>
          <declname>pass</declname>
        </param>
        <briefdescription>
<para>set the password for the remote grid user/server </para>        </briefdescription>
        <detaileddescription>
<para>In order to connect to the Grid and be able to submit jobs we need a tuple (host/user/password/passphrase), i.e. an entry point to log in, and a passphrase to unlock the grid certificate.</para><para>This method allows us to specify the password to clear access to the Grid UI host.</para><para>Note that this is specific to the remote UI server selected.</para><para>Further note that gaining access to a user account on a given host does not give us rights to submit jobs: we still need to unlock our ID certificate with the appropriate passphrase. Anybody with root access to an UI host can add accounts. Further, the UI host might have other roles and host other accounts for different purposes which should not access the grid. Bottomline is that we can not trust an account on a user-controlled host to identify Grid users. For this we need to recurse to a central authority to grant final access.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $password=&quot;password&quot;;</computeroutput> </para><para><computeroutput> $eg = new Grid; if ($eg == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; $eg-&gt;set_password($password); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>password needed to login on to the grid UI server </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="553" bodystart="552" bodyend="559"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::set_passphrase</definition>
        <argsstring>($pass)</argsstring>
        <name>set_passphrase</name>
        <param>
          <type>$</type>
          <declname>pass</declname>
        </param>
        <briefdescription>
<para>set the passphrase for the remote grid user </para>        </briefdescription>
        <detaileddescription>
<para>In order to connect to the Grid and be able to submit jobs we need a tuple (host/user/password/passphrase), i.e. an entry point to log in, and a passphrase to unlock the grid certificate.</para><para>After we gain access to the UI host, we must unlock our certificate which identifies ourselves as &apos;bona-fide&apos; grid users.</para><para>People might have an account on any UI node for a variety of reasons, but that does not qualify them to use Grid resources. Only a central Grid authority can grant this kind of access and this is done by issuing a Certificate.</para><para>Users then must store this certificate in their account on a UI host and protect it with a suitably long passphrase. This last one is the value we provide here.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $passphrase=&quot;pass phrase to unlock certificate&quot;;</computeroutput> </para><para><computeroutput> $eg = new Grid; if ($eg == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; $eg-&gt;set_passphrase($passphrase); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>passphrase needed to unlock the grid certificate </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="600" bodystart="599" bodyend="606"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::set_work_dir</definition>
        <argsstring>($wd)</argsstring>
        <name>set_work_dir</name>
        <param>
          <type>$</type>
          <declname>wd</declname>
        </param>
        <briefdescription>
<para>set working directory on the Grid server </para>        </briefdescription>
        <detaileddescription>
<para>This is a directory located on the grid server where all jobs and job related information will be created. It may be a path local to the user home or a global path (usually on /tmp or /var/tmp).</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $eg = new Grid; if ($eg == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; $eg-&gt;set_work_dir(&quot;./grid-services&quot;); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>the remote path of the working directory </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="631" bodystart="630" bodyend="637"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::set_error_log</definition>
        <argsstring>($errlog)</argsstring>
        <name>set_error_log</name>
        <param>
          <type>$</type>
          <declname>errlog</declname>
        </param>
        <briefdescription>
<para>set error log </para>        </briefdescription>
        <detaileddescription>
<para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $eg = new Grid; if ($eg == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; $eg-&gt;set_error_log(&quot;./grid-services/error.log&quot;); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>path to a local file where we will store the error log (i.e. stderr of the grid connection) </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="658" bodystart="657" bodyend="664"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::get_connection_status</definition>
        <argsstring>()</argsstring>
        <name>get_connection_status</name>
        <briefdescription>
<para>get grid connection status </para>        </briefdescription>
        <detaileddescription>
<para>This method allows you to know if the connection with the remote grid entry point has been successfully established or not. Note that this does not mean you may launch jobs to the grid: you still need to initialize the grid first.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $eg = new Grid;</computeroutput> </para><para><computeroutput> $eg-&gt;pconnect(); if ($eg-&gt;<ref refid="classGrid_1a8" kindref="member">get_connection_status()</ref> == FALSE) echo &quot;Couldn&apos;t connect to the Grid entry point!\n&quot;; </computeroutput> </para><para><simplesect kind="return"><para>bool TRUE if the connection has been established, FALSE otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="691" bodystart="690" bodyend="697"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::get_init_status</definition>
        <argsstring>()</argsstring>
        <name>get_init_status</name>
        <briefdescription>
<para>get grid initialization status </para>        </briefdescription>
        <detaileddescription>
<para>This method allows you to learn whether the Grid has been successfully initialized and is ready to accept jobs. This entails both, login in as a specific user on the Grid connection point, and activating the proxy with your passphrase.</para><para>The reason for the two step process is that in order to activate the grid you need to identify yourself using a grid certificate emitted by a CA. But to activate it you need an account on a grid access machine, which is open by any local administrator. Since this account is not under the central CA control, we can&apos;t trust it to submit jobs and require a proxy-initialization with an appropriate passphrase.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $eg = new Grid;</computeroutput> </para><para><computeroutput> $eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>; if ($eg-&gt;<ref refid="classGrid_1a9" kindref="member">get_init_status()</ref> == FALSE) echo &quot;Couldn&apos;t initialize the Grid!\n&quot;; </computeroutput> </para><para><simplesect kind="return"><para>bool TRUE if the grid has been initialized, FALSE otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="732" bodystart="731" bodyend="738"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::connect</definition>
        <argsstring>()</argsstring>
        <name>connect</name>
        <briefdescription>
<para>open a persistent connection to the Grid UI server </para>        </briefdescription>
        <detaileddescription>
<para>The Grid User Interface Server is the entry point to the Grid for users and user applications. This is where jobs are launched from.</para><para>This package has been designed to be able to be installed in any host, independent of whether it is an UI or not. Thus, to be able to submit jobs to the Grid, the server hosting the Web UI must connect to a Grid UI host to do the work.</para><para>This routine opens a connection to a Grid UI host using an specified username (i.e. all jobs will be run under said username).</para><para>The panorama therefore will look like this:</para><para>HTML front-end --&gt; processor.php &lt;--&gt; SSH &lt;--&gt; remote host &lt;--&gt; Grid</para><para>This allows for better resilience: should a GridUI host be unavailable, we can detect the error condition and try another one. If the GridUI runs the front-end, then we have a single point of failure, which is a no-no.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $eg = new Grid;</computeroutput> </para><para><computeroutput> $eg-&gt;pconnect(); if ($eg-&gt;<ref refid="classGrid_1a8" kindref="member">get_connection_status()</ref> == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; </computeroutput> </para><para><simplesect kind="note"><para>Use files instead of pipes and open them after securing thew connection: this should do with deadlocks and leave a trace log.</para></simplesect>
<simplesect kind="return"><para>TRUE on success, FALSE otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="789" bodystart="788" bodyend="806"/>
        <referencedby refid="classGrid_1a17" compoundref="src_2grid_8php" startline="1312" endline="1320">session_list_all</referencedby>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::initialize</definition>
        <argsstring>($hours=12, $minutes=0)</argsstring>
        <name>initialize</name>
        <param>
          <type>$</type>
          <declname>hours</declname>
          <defval>12</defval>
        </param>
        <param>
          <type>$</type>
          <declname>minutes</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Start the Grid services. </para>        </briefdescription>
        <detaileddescription>
<para>This function starts the grid services on the remote UI server host. This is done by unlocking the certificate that we are going to use to run our jobs on the grid using the passphrase provided.</para><para>Grid services have a lifetime of their own. By default they are available for 12:00 hours (that&apos;s the default value of grid-proxy-init itself), but their duration may be fine tuned if we have some knowledge about the time required to run our job.</para><para>Grid opening time is specified in hours+minutes. If the number of minutes is negative, the specified minutes are substracted from the specified hours (e.g: 1, -15 is fifteen minutes to one hour, i.e. 45 minutes). If the total time specified is negative then the default of 12:00 is used.</para><para><ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> enables the grid for a specified amount of time (by default 12:00h). This means that during the validity period, the user on the Grid-UI host may access the grid, in the same or different logins. The validity period SURVIVES after we close all communications with the remote grid entry point for as long as we have specified (so our jobs may continue running).</para><para>If Grid access was already available (by a previous call to <ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref>) when we issue the call, then it is reused and extended to acommodate the newly requested validity period. In other words, the Grid access is shared among all logins during its lifetime.</para><para>This also means that if a valid certificate has been issued and not expired yet (another call to <ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> is still valid), then we may submit jobs to the Grid without any need to call <ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> ourselves.</para><para>E.g., say you have a web-based service that runs a long job and you want to have the grid enabled 12h (the default). You just call <ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> and then submit the job.</para><para>Now say that before it expires, someone logs in on your account but shouldn&apos;t have access to the Grid (i.e. they don&apos;t know the Grid-activation passphrase). Since the grid is already activated, they CAN submit jobs on your behalf even if they should not.</para><para>Therefore, <bold>DO NOT SHARE YOUR ACCOUNT ON THE GRID-UI WITH ANYBODY</bold> . Protect it as dearly as your Grid certificate.</para><para>It also means that debugging may be somewhat convoluted, as a call to <ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> may fail and jobs could still be accepted if another call from some other process is still valid. While debugging, it is better if you review the command output and make sure it shows how the call fared.</para><para>So, what happens if we destroy a session? See <ref refid="classGrid_1a12" kindref="member">Grid::destroy()</ref> for more details.</para><para>Sample usage: <computeroutput> $eg = new Grid; $eg-&gt;set_user($user); $eg-&gt;set_host($host); $eg-&gt;set_password($passwd); $eg-&gt;set_passphrase($passphrase); $eg-&gt;set_work_dir(&quot;/tmp/grid/test/cless&quot;); $eg-&gt;set_error_log(&quot;/tmp/grid/test/cless/connection.err&quot;); $eg-&gt;<ref refid="classGrid_1a10" kindref="member">connect()</ref>; if (!$eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>) echo &quot;error: couldn&apos;t init the grid\n&quot;; else echo &quot;OK\n&quot;; $eg-&gt;<ref refid="classGrid_1a12" kindref="member">destroy()</ref>; $eg-&gt;disconnect(); </computeroutput> </para><para><simplesect kind="note"><para>the output of the grid initialization command will go to <bold>our</bold>  standard output (i.e. the web server)!</para></simplesect>
</para><para><xrefsect id="bug_1_bug000001"><xreftitle>Bug</xreftitle><xrefdescription><para>: XXX JR XXX grid-proxy-init will use the time from the last issued command. To avoid setting a time shorter than one already existing we should first issue a grid-proxy-info, check if there is a running proxy, its time left, see if it is longer than what we want to set and if it is, then do NOTHING to avoid setting it shorter. </para></xrefdescription></xrefsect><parameterlist kind="param"><parametername>integer</parametername>
<parameterdescription>
<para>Estimated duration in hours of the session</para></parameterdescription><parametername>integer</parametername>
<parameterdescription>
<para>Estimated duration in minutes of the session</para></parameterdescription></parameterlist>
<simplesect kind="return"><para>bool TRUE on success, FALSE otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="904" bodystart="903" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
<para>Destroy remote grid identity. </para>        </briefdescription>
        <detaileddescription>
<para>Destroy the certification we initialized so that no more jobs can be launched under our identity.</para><para>This may be called even if we haven&apos;t called &apos;Grid::initialize()&apos; because there may exits a previous activation that is still valid and we want to destroy it.</para><para>To make things clear:</para><para><ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> &quot;opens&quot; the &quot;door&quot; to the Grid for <emphasis>the user</emphasis>  during a given time. New calls from the same user in this or any other login session, from this or any other site, while the &quot;door&quot; is open, share the same &quot;door&quot; and simply extend its validity period.</para><para><ref refid="classGrid_1a12" kindref="member">Grid::destroy()</ref> &quot;closes&quot; the currently open door. If the door was being shared by more login sessions, it is closed for <emphasis>all</emphasis>  of them, not just the caller, and hence nor the caller, nor <emphasis>any process</emphasis>  under the same user will be able to use the grid any longer unless <ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> is called again to open the door again (issue a new certificate).</para><para>In other words, you don&apos;t close <emphasis>a</emphasis>  Grid &quot;door&quot;, you close <emphasis>the</emphasis>  Grid &quot;door&quot;, and if it casually is being shared with other work sessions, then ALL of them will be destroyed (meaning that other active work sessions will fail).</para><para>Thus: be careful when using this method. Be <bold>very careful</bold> .</para><para>Sessions should be initiated using a validity length that you guesstimate will be comfortably enough for running all your work and left to expire by themselves.</para><para><ref refid="classGrid_1a12" kindref="member">Grid::destroy()</ref> should only be called when you are sure that you don&apos;t want <emphasis>any</emphasis>  work on the Grid to be accepted on your behalf, neither from this not other work sessions.</para><para>So, in general, it is better to make good estimations of the time needed by your jobs and specify it to <ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> and not use <ref refid="classGrid_1a12" kindref="member">Grid::destroy()</ref> unless there are good reasons.</para><para>Sample usage: <computeroutput> $eg = new Grid; $eg-&gt;set_user($user); $eg-&gt;set_host($host); $eg-&gt;set_password($passwd); $eg-&gt;set_passphrase($passphrase); $eg-&gt;set_work_dir(&quot;/tmp/grid/test/cless&quot;); $eg-&gt;set_error_log(&quot;/tmp/grid/test/cless/connection.err&quot;); if (!$eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>) echo &quot;error: couldn&apos;t init the grid\n&quot;; else echo &quot;OK&quot;; $eg-&gt;<ref refid="classGrid_1a12" kindref="member">destroy()</ref>; $eg-&gt;disconnect(); </computeroutput> </para><para><simplesect kind="note"><para>Be careful when using this function: as it destroys our Grid-ID, no more work will be able to be executed on the grid on our behalf. In other words, please, make sure there is no work pending and that all your work has terminated before destroying your Grid-ID.</para></simplesect>
<simplesect kind="return"><para>bool TRUE on success, FALSE on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="1039" bodystart="1038" bodyend="1061"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::session_new</definition>
        <argsstring>($hint=&quot;sess&quot;)</argsstring>
        <name>session_new</name>
        <param>
          <type>$</type>
          <declname>hint</declname>
          <defval>&quot;sess&quot;</defval>
        </param>
        <briefdescription>
<para>Create a new session. </para>        </briefdescription>
        <detaileddescription>
<para>We take control of the session system: in a previous incarnation we got the session name from the user. This is dangerous since we can not avoid clashes even with random session names provided by a user: a randomly generated name may be guaranteed unique within the user&apos;s local host namespace, but should various calls come from different hosts (e.g. HA front-ends in a cluster), it is conceivable (although improbable) that both come up with the same random number and generate a clash on the shared remote grid access point. Hence the new approach: to be true, users do not need to generate a session name themselves: they just need a way to refer to them.</para><para>This routine will generate a new session: under a given session, we guarantee that processes will be run under an isolated sandbox where non name clashes from other concurrent users will occur. Name clashes within a given session induced by the user are still the responsability of the user.</para><para>SESSIONS</para><para>The basic idea is as follows: if you are developing a service that may be called concurrently by various users, your problem at the GrUI is the same as on your local server: avoiding name clashes for jobs. As long as you manage that locally using unique names, the same will work on the UI server.</para><para>This however may be inconvenient at times. It is usually the case when your service is not composed by a single job, but by many independent jobs that may be run concurrently as well. You still need to generate unique names for each sub-job, but if they are produced within a local uniquely named service-instance, then you may reuse the sub-job names for each instance.</para><para>This comes handy in the case of many sub-jobs: as long as the main service instance is uniquely identified, contained sub-jobs may have significant names that are easier to identify than randomly-generated ones: e.g. <preformatted>
    user A -&gt; service-instance-A -+-&gt; sub-job-1
                                  |
                                  +-&gt; sub-job-2
                                  |
                                  etc...</preformatted> </para><para><preformatted>    user B -&gt; service-instance-B -+-&gt; sub-job-1
                                  |
                                  +-&gt; sub-job-2
                                  |
                                  etc...
 </preformatted>  In this case, since the service-instances have unique names (A, B) we may use the same naming strategy in both cases for naming sub-jobs (1, 2,...) which makes bookkeeping a lot easier.</para><para>To reproduce a similar behaviour remotely we provide &apos;sessions&apos;.</para><para>Basically, what you are doing in the local case is isolating all the equally named jobs of each service-instance within an unique sandbox. In the grid you get the same result using &apos;sessions&apos;: whenever you want to submit a series of non-randomly-named jobs (or even a single one) you first allocate a session, and then attach those jobs to the session. Job names within a session are guaranteed not to clash with equal job names from another session.</para><para>Note the &apos;non-randomly-named&apos; tag above: you want to use sessions ALWAYS that you use any non-random job name unless you can guarantee it will be the only job with that name ON THE GRID.</para><para>This is an important notice: your job may have a non-random, but guaranteed unique name on your local host. And as long as the job will only be submitted from your local host it is OK. But if you are going to share your tools with other fellows, then they will install them locally and submit a similarly named job as well. The job name will be unique within each one&apos;s local machine, but when jobs are collected at the GrUI, they will all have the same name, which is a no-no.</para><para>USING SESSIONS</para><para>Once you see the need for using sessions, using them is quite simple: you call this function asking for a new session to be created on the remote grid access point on your behalf. The routine will return a unique session identifier which you later use to tag jobs that are to be run within that session&apos;s sandbox.</para><para>Sample usage: <computeroutput> $eg = new Grid; $eg-&gt;set_user($user); $eg-&gt;set_host($host); $eg-&gt;set_password($passwd); $eg-&gt;set_passphrase($passphrase); $eg-&gt;set_work_dir(&quot;/tmp/grid/debug&quot;); $eg-&gt;set_error_log(&quot;/tmp/grid/debug/connection.err&quot;); echo &quot;initializing grid... &quot;; if (!$eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>) { echo &quot;error: couldn&apos;t init the grid\n&quot;; exit; } else echo &quot;OK\n&quot;; echo &quot;Submitting tst-job to default session...\n&quot;; $out = array(&quot;&quot;); if (! $eg-&gt;job_submit(&quot;tst-job&quot;, $out)) { echo &quot;error: coudn&apos;t start the job\n&quot;; exit; } else echo &quot;OK\n&quot;; print_r($out); echo &quot;Submitting tst-job to a new session...\n&quot;; $sess = $eg-&gt;<ref refid="classGrid_1a13" kindref="member">session_new()</ref>; echo &quot;sess = &quot;; print_r($sess); echo &quot;\n&quot;; if ($sess != FALSE) { $out = array(&quot;&quot;); if (! $eg-&gt;job_submit(&quot;tst-job&quot;, $out, $sess)) echo &quot;error: coudn&apos;t start the job\n&quot;; else { echo &quot;OK\n&quot;; } $eg-&gt;session_destroy($sess); } $eg-&gt;<ref refid="classGrid_1a1" kindref="member">destruct()</ref>; </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>$hint an optional string to be used for the session name</para></parameterdescription></parameterlist>
<simplesect kind="return"><para>string|false session ID of the newly generated session. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="1195" bodystart="1194" bodyend="1246"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::session_define</definition>
        <argsstring>($session, $directory)</argsstring>
        <name>session_define</name>
        <param>
          <type>$</type>
          <declname>session</declname>
        </param>
        <param>
          <type>$</type>
          <declname>directory</declname>
        </param>
        <briefdescription>
<para>Define an already existing session. </para>        </briefdescription>
        <detaileddescription>
<para>This is useful if the session already exists and we want to access it: we already know its directory name, and just want to associate a new name with the existing directory name.</para><para>Use e.g. when you are to submit a job from a WWW page and access the results from a different one: as the new page has no access to the status of the previous one, we need to rebuild it ourselves.</para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>session name </para></parameterdescription><parametername>string</parametername>
<parameterdescription>
<para>subdirectory of $work_dir to be associated to that name </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="1265" bodystart="1264" bodyend="1267"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::session_is_valid</definition>
        <argsstring>($session=&apos;default&apos;)</argsstring>
        <name>session_is_valid</name>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>check if supplied argument is a valid (existing and active) session. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>a session name </para></parameterdescription></parameterlist>
<simplesect kind="return"><para>bool TRUE if the session could be found among the list of valid sessions, FALSE otherwise</para></simplesect>
private </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="1280" bodystart="1279" bodyend="1288"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
        <referencedby refid="classGrid_1a20" compoundref="src_2grid_8php" startline="1410" endline="1413">job_submit_set_timeout</referencedby>
        <referencedby refid="classGrid_1a17" compoundref="src_2grid_8php" startline="1312" endline="1320">session_list_all</referencedby>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::session_directory</definition>
        <argsstring>($session=&apos;default&apos;)</argsstring>
        <name>session_directory</name>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>return the directory associated to a session </para>        </briefdescription>
        <detaileddescription>
<para>DOES NO ERROR CHECKING FOR VALID SESSION</para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>a session name </para></parameterdescription></parameterlist>
<simplesect kind="return"><para>string the associated directory name</para></simplesect>
private </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="1301" bodystart="1300" bodyend="1304"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::session_list_all</definition>
        <argsstring>()</argsstring>
        <name>session_list_all</name>
        <briefdescription>
<para>list all existing sessions (debugging only) </para>        </briefdescription>
        <detaileddescription>
<para>private </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="1313" bodystart="1312" bodyend="1320"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
        <references refid="classGrid_1a10" compoundref="src_2grid_8php" startline="788" endline="806">connect</references>
        <references refid="classGrid_1a15" compoundref="src_2grid_8php" startline="1279" endline="1288">session_is_valid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::session_destroy</definition>
        <argsstring>($session=&apos;default&apos;)</argsstring>
        <name>session_destroy</name>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>destroy the specified session </para>        </briefdescription>
        <detaileddescription>
<para>This method destroys all data associated with the specified session. Currently it does not kill its associated jobs, but deleted all their underlying data nevertheless.</para><para>Warning: passing an empty string or no argument will destroy the default session.</para><para>return bool TRUE if success, FALSE otherwise </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="1335" bodystart="1334" bodyend="1360"/>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::session_destroy_all</definition>
        <argsstring>()</argsstring>
        <name>session_destroy_all</name>
        <briefdescription>
<para>Destroy all existing sessions. </para>        </briefdescription>
        <detaileddescription>
<para>private </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="1368" bodystart="1367" bodyend="1391"/>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::job_submit_set_timeout</definition>
        <argsstring>($seconds=0)</argsstring>
        <name>job_submit_set_timeout</name>
        <param>
          <type>$</type>
          <declname>seconds</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set maximum (guesstimated) allowed time for a job submission to succeed. </para>        </briefdescription>
        <detaileddescription>
<para>This value is application and dataset dependent, will be of relevance in rare occasions (1/4000) and hence may as well be generous.</para><para>The default is 0 seconds (no timeout). You should make measures to ensure it is reasonable. If set to 0, no timeout will be used.</para><para>Unless set to 0, you will need to code some resubmission policy in your application.</para><para><parameterlist kind="param"><parametername>integer</parametername>
<parameterdescription>
<para>$seconds timeout in seconds for job submission (defaults to 0, no timeout). </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="1411" bodystart="1410" bodyend="1413"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
        <references refid="classGrid_1a15" compoundref="src_2grid_8php" startline="1279" endline="1288">session_is_valid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::job_submit</definition>
        <argsstring>($job, &amp;$out, $session=&apos;default&apos;)</argsstring>
        <name>job_submit</name>
        <param>
          <type>$</type>
          <declname>job</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>out</declname>
        </param>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>submit a job to the grid </para>        </briefdescription>
        <detaileddescription>
<para>This procedure submits a job to the Grid, optionally tagging it as part of a specific session.</para><para>A job must be stored in a single directory (whose name you provide in the call to this function). The directory must contain any executables, libraries, configuration files/scripts, and input data needed to run your job.</para><para>In addition, there must be a JDL file called &apos;job.jdl&apos; and describing the job to the grid using the JDL language.</para><para>Please note that only the job-directory name is used. If you provide a longer path, only the last component (the job directory name) will be used to identify your job remotely.</para><para>Sample usage: <computeroutput> $eg = new Grid; $eg-&gt;set_user($user); $eg-&gt;set_host($host); $eg-&gt;set_password($passwd); $eg-&gt;set_passphrase($passphrase); $eg-&gt;set_work_dir(&quot;/tmp/grid/test/cless&quot;); $eg-&gt;set_error_log(&quot;/tmp/grid/test/cless/connection.err&quot;); echo &quot;initializing grid... &quot;; if (!$eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>) echo &quot;error: couldn&apos;t init the grid\n&quot;; else echo &quot;OK\n&quot;; echo &quot;Submitting tst-job... &quot;; if (! $eg-&gt;job_submit(&quot;tst-job&quot;, $out)) echo &quot;error: coudn&apos;t start the job\n&quot;; else echo &quot;OK\n&quot;; print_r($out); $eg-&gt;<ref refid="classGrid_1a12" kindref="member">destroy()</ref>; $eg-&gt;disconnect(); </computeroutput> </para><para><simplesect kind="note"><para>in future instances we may provide routines to generate the JDL, possibly within a GridJob class of its own.</para></simplesect>
<parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>The name of the job (same as the subdirectory it is in) </para></parameterdescription><parametername>array</parametername>
<parameterdescription>
<para>A variable to hold any messages spitted by the submission procedure. Messages will be stored as an array of strings (one per line) without ending newlines. </para></parameterdescription><parametername>string</parametername>
<parameterdescription>
<para>Optional name of the session to which this job belongs (obtained from a previous call to session_new). </para></parameterdescription></parameterlist>
<simplesect kind="return"><para>bool TRUE if success, FALSE otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="1469" bodystart="1468" bodyend="1557"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::job_get_id</definition>
        <argsstring>($job, $session=&apos;default&apos;)</argsstring>
        <name>job_get_id</name>
        <param>
          <type>$</type>
          <declname>job</declname>
        </param>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>Get Grid ID of a submitted job. </para>        </briefdescription>
        <detaileddescription>
<para>You should not need this function normally. The job and session names you already have should actually be enough for all your needs. The function is needed internally by the class, but otherwise it should be of little interest.</para><para>Nevertheless, you may want to have access to this knowledge, either out of curiosity or for other reasons (e.g. re-routing access to a job through other access points after a crash of the original access point you used to submit it).</para><para>Indeed, this will come handy for newer releases of this class when disaster recovery is added. Meanwhile, as already said, it is of little use.</para><para>Sample usage: <computeroutput> $eg = new Grid; $eg-&gt;set_user($user); $eg-&gt;set_host($host); $eg-&gt;set_password($passwd); $eg-&gt;set_passphrase($passphrase); $eg-&gt;set_work_dir(&quot;/tmp/grid/test/cless&quot;); $eg-&gt;set_error_log(&quot;/tmp/grid/test/cless/connection.err&quot;); echo &quot;initializing grid... &quot;; if (!$eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>) echo &quot;error: couldn&apos;t init the grid\n&quot;; else echo &quot;OK\n&quot;; echo &quot;Submitting tst-job... &quot;; if (! $eg-&gt;job_submit(&quot;tst-job&quot;, $out)) echo &quot;error: coudn&apos;t start the job\n&quot;; else echo &quot;OK\n&quot;; print_r($out); print_r($eg-&gt;job_get_id(&quot;tst-job&quot;)); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>The name of the job you submitted to the grid </para></parameterdescription><parametername>string</parametername>
<parameterdescription>
<para>Optionally identifies the session to which the job belongs (if it was submitted within one).</para></parameterdescription></parameterlist>
<simplesect kind="return"><para>array|false with the known job-id&apos;s submitted from this &apos;job&apos;. That looks as an oxymoron: there should only be one. Ergo, you may use it to detect job name clashes or job re-submissions.</para></simplesect>
<simplesect kind="note"><para>this is nasty and should be enhanced on a future version. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="1611" bodystart="1610" bodyend="1677"/>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::job_status</definition>
        <argsstring>($job, &amp;$out, $session=&apos;default&apos;)</argsstring>
        <name>job_status</name>
        <param>
          <type>$</type>
          <declname>job</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>out</declname>
        </param>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>check job status </para>        </briefdescription>
        <detaileddescription>
<para>This routine retrieves the job status report from the remote grid entry point into your local job directory, and returns the status of your specified job/session.</para><para>Sample usage: <computeroutput> $eg = new Grid; $eg-&gt;set_user($user); $eg-&gt;set_host($host); $eg-&gt;set_password($passwd); $eg-&gt;set_passphrase($passphrase); $eg-&gt;set_work_dir(&quot;/tmp/grid/test/cless&quot;); $eg-&gt;set_error_log(&quot;/tmp/grid/test/cless/connection.err&quot;); echo &quot;initializing grid... &quot;; if (!$eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>) echo &quot;error: couldn&apos;t init the grid\n&quot;; else echo &quot;OK\n&quot;; echo &quot;Submitting tst-job... &quot;; if (! $eg-&gt;job_submit(&quot;tst-job&quot;, $out)) echo &quot;error: coudn&apos;t start the job\n&quot;; else echo &quot;OK\n&quot;; print_r($out); echo &quot;\nGetting job ID... \n&quot;; print_r($eg-&gt;job_get_id(&quot;tst-job&quot;)); echo &quot;\nGetting job status... \n&quot;; print_r($eg-&gt;job_status(&quot;tst-job&quot;, $out)); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>The name of the job you submitted to the grid </para></parameterdescription><parametername>string</parametername>
<parameterdescription>
<para>Output of the status request program. Useful for debugging. </para></parameterdescription><parametername>string</parametername>
<parameterdescription>
<para>Optionally identifies the session to which the job belongs (if it was submitted within one).</para></parameterdescription></parameterlist>
<simplesect kind="return"><para>array|false an array containing the job status or FALSE on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="1722" bodystart="1721" bodyend="1792"/>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::job_get_output</definition>
        <argsstring>($job, &amp;$out, $session=&apos;default&apos;)</argsstring>
        <name>job_get_output</name>
        <param>
          <type>$</type>
          <declname>job</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>out</declname>
        </param>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>retrieve results </para>        </briefdescription>
        <detaileddescription>
<para>Retrieve the results of a job from the Grid. This function will attempt to retrieve the results of a job. This relies on the results being already available, i.e. you better check the job status first and make sure it has completed.</para><para>If you don&apos;t, and the job hasn&apos;t completed yet, don&apos;t worry: nothing will be retrieved. So, no harm done. But you should check stdout to verify the condition.</para><para>All results will be stored remotely on the job directory, under a subdirectory with a unique name of the form $grid_user_name_XXXXX... where the X&apos;s mean a random string. Locally you will see them as $job/job_output so that they have an easy name to identify them.</para><para>To access your job output, just open this $job/output directory and look inside.</para><para>The rationale for this is to avoid overwriting your job information with its output. If that was intended, nothing is lost, just pick-up the newly generated file. This way you always have continued access to your old, submitted data for checking.</para><para>Sample usage: <computeroutput> $eg = new Grid; $eg-&gt;set_user($user); $eg-&gt;set_host($host); $eg-&gt;set_password($passwd); $eg-&gt;set_passphrase($passphrase); $eg-&gt;set_work_dir(&quot;/tmp/grid/test/cless&quot;); $eg-&gt;set_error_log(&quot;/tmp/grid/test/cless/connection.err&quot;); echo &quot;initializing grid... &quot;; if (!$eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>) echo &quot;error: couldn&apos;t init the grid\n&quot;; else echo &quot;OK\n&quot;; echo &quot;Submitting tst-job... &quot;; if (! $eg-&gt;job_submit(&quot;tst-job&quot;, $out)) echo &quot;error: coudn&apos;t start the job\n&quot;; else echo &quot;OK\n&quot;; print_r($out); echo &quot;\nGetting job ID... \n&quot;; print_r($eg-&gt;job_get_id(&quot;tst-job&quot;)); echo &quot;\nGetting job status... \n&quot;; print_r($eg-&gt;job_status(&quot;tst-job&quot;, $out)); echo &quot;\nGetting job output... &quot;; if (! $eg-&gt;job_get_output(&quot;tst-job&quot;, $out)) echo &quot;error: couldn&apos;t get job output\n&quot;; else echo &quot;OK\n&quot;; print_r($out); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>The name of the job you submitted to the grid </para></parameterdescription><parametername>string</parametername>
<parameterdescription>
<para>Optionally identifies the session to which the job belongs (if it was submitted within one). If this is not specified, then the default session is used. </para></parameterdescription></parameterlist>
<simplesect kind="return"><para>bool TRUE on success, FALSE on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="1858" bodystart="1857" bodyend="1932"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::job_cancel</definition>
        <argsstring>($job, &amp;$out, $session=&apos;default&apos;)</argsstring>
        <name>job_cancel</name>
        <param>
          <type>$</type>
          <declname>job</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>out</declname>
        </param>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>Cancel a job previously submitted to the grid. </para>        </briefdescription>
        <detaileddescription>
<para>Note: If the job has not reached the CE yet (i.e.: its status is WAITING or READY states), the cancellation request may be ignored, and the job may continue running, although a message of successful cancellation is returned to the user. In such cases, just cancel the job again when its status is SCHEDULED or RUNNING</para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>The name of the job you submitted to the grid </para></parameterdescription><parametername>string</parametername>
<parameterdescription>
<para>Optionally identifies the session to which the job belongs (if it was submitted within one). If this is not specified, then the default session is used. </para></parameterdescription></parameterlist>
<simplesect kind="return"><para>bool TRUE on success, FALSE on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="1950" bodystart="1949" bodyend="1977"/>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::Grid</definition>
        <argsstring>()</argsstring>
        <name>Grid</name>
        <briefdescription>
<para>Constructor for the class. </para>        </briefdescription>
        <detaileddescription>
<para>Set the values for the class variables using defaults provided in &apos;config.php&apos;</para><para>These defaults can be overridden using the functions provided below.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $eg = new Grid; if ($eg == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; </computeroutput> </para><para><simplesect kind="return"><para>Grid a new instance of a Grid class object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="399" bodystart="399" bodyend="414"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::destruct</definition>
        <argsstring>()</argsstring>
        <name>destruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="416" bodystart="416" bodyend="431"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::set_user</definition>
        <argsstring>($user)</argsstring>
        <name>set_user</name>
        <param>
          <type>$</type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>set the Grid user name </para>        </briefdescription>
        <detaileddescription>
<para>In order to connect to the Grid and be able to submit jobs we need a tuple (host/user/password/passphrase), i.e. an entry point to log in, and a passphrase to unlock the grid certificate.</para><para>This method allows us to define the username which will be used to log in on the grid, i.e. how do we identify ourselves to the Grid UI host.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $user=&quot;user&quot;;</computeroutput> </para><para><computeroutput> $eg = new Grid; if ($eg == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; $eg-&gt;set_user($user); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>user identity to use in the Grid UI host </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="465" bodystart="464" bodyend="472"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::set_host</definition>
        <argsstring>($host)</argsstring>
        <name>set_host</name>
        <param>
          <type>$</type>
          <declname>host</declname>
        </param>
        <briefdescription>
<para>set the name of the Grid access host </para>        </briefdescription>
        <detaileddescription>
<para>In order to connect to the Grid and be able to submit jobs we need a tuple (host/user/password/passphrase), i.e. an entry point to log in, and a passphrase to unlock the grid certificate.</para><para>This method allows us to define the entry point to use to gain access to the Grid.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $host=&quot;gridui.example.com&quot;;</computeroutput> </para><para><computeroutput> $eg = new Grid; if ($eg == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; $eg-&gt;set_host($host); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>host name of the remote UI host </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="502" bodystart="501" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::set_password</definition>
        <argsstring>($pass)</argsstring>
        <name>set_password</name>
        <param>
          <type>$</type>
          <declname>pass</declname>
        </param>
        <briefdescription>
<para>set the password for the remote grid user/server </para>        </briefdescription>
        <detaileddescription>
<para>In order to connect to the Grid and be able to submit jobs we need a tuple (host/user/password/passphrase), i.e. an entry point to log in, and a passphrase to unlock the grid certificate.</para><para>This method allows us to specify the password to clear access to the Grid UI host.</para><para>Note that this is specific to the remote UI server selected.</para><para>Further note that gaining access to a user account on a given host does not give us rights to submit jobs: we still need to unlock our ID certificate with the appropriate passphrase. Anybody with root access to an UI host can add accounts. Further, the UI host might have other roles and host other accounts for different purposes which should not access the grid. Bottomline is that we can not trust an account on a user-controlled host to identify Grid users. For this we need to recurse to a central authority to grant final access.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $password=&quot;password&quot;;</computeroutput> </para><para><computeroutput> $eg = new Grid; if ($eg == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; $eg-&gt;set_password($password); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>password needed to login on to the grid UI server </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="553" bodystart="552" bodyend="559"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::set_passphrase</definition>
        <argsstring>($pass)</argsstring>
        <name>set_passphrase</name>
        <param>
          <type>$</type>
          <declname>pass</declname>
        </param>
        <briefdescription>
<para>set the passphrase for the remote grid user </para>        </briefdescription>
        <detaileddescription>
<para>In order to connect to the Grid and be able to submit jobs we need a tuple (host/user/password/passphrase), i.e. an entry point to log in, and a passphrase to unlock the grid certificate.</para><para>After we gain access to the UI host, we must unlock our certificate which identifies ourselves as &apos;bona-fide&apos; grid users.</para><para>People might have an account on any UI node for a variety of reasons, but that does not qualify them to use Grid resources. Only a central Grid authority can grant this kind of access and this is done by issuing a Certificate.</para><para>Users then must store this certificate in their account on a UI host and protect it with a suitably long passphrase. This last one is the value we provide here.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $passphrase=&quot;pass phrase to unlock certificate&quot;;</computeroutput> </para><para><computeroutput> $eg = new Grid; if ($eg == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; $eg-&gt;set_passphrase($passphrase); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>passphrase needed to unlock the grid certificate </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="600" bodystart="599" bodyend="606"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::set_work_dir</definition>
        <argsstring>($wd)</argsstring>
        <name>set_work_dir</name>
        <param>
          <type>$</type>
          <declname>wd</declname>
        </param>
        <briefdescription>
<para>set working directory on the Grid server </para>        </briefdescription>
        <detaileddescription>
<para>This is a directory located on the grid server where all jobs and job related information will be created. It may be a path local to the user home or a global path (usually on /tmp or /var/tmp).</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $eg = new Grid; if ($eg == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; $eg-&gt;set_work_dir(&quot;./grid-services&quot;); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>the remote path of the working directory </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="631" bodystart="630" bodyend="637"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::set_error_log</definition>
        <argsstring>($errlog)</argsstring>
        <name>set_error_log</name>
        <param>
          <type>$</type>
          <declname>errlog</declname>
        </param>
        <briefdescription>
<para>set error log </para>        </briefdescription>
        <detaileddescription>
<para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $eg = new Grid; if ($eg == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; $eg-&gt;set_error_log(&quot;./grid-services/error.log&quot;); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>path to a local file where we will store the error log (i.e. stderr of the grid connection) </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="658" bodystart="657" bodyend="664"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::get_connection_status</definition>
        <argsstring>()</argsstring>
        <name>get_connection_status</name>
        <briefdescription>
<para>get grid connection status </para>        </briefdescription>
        <detaileddescription>
<para>This method allows you to know if the connection with the remote grid entry point has been successfully established or not. Note that this does not mean you may launch jobs to the grid: you still need to initialize the grid first.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $eg = new Grid;</computeroutput> </para><para><computeroutput> $eg-&gt;pconnect(); if ($eg-&gt;<ref refid="classGrid_1a8" kindref="member">get_connection_status()</ref> == FALSE) echo &quot;Couldn&apos;t connect to the Grid entry point!\n&quot;; </computeroutput> </para><para><simplesect kind="return"><para>bool TRUE if the connection has been established, FALSE otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="691" bodystart="690" bodyend="697"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::get_init_status</definition>
        <argsstring>()</argsstring>
        <name>get_init_status</name>
        <briefdescription>
<para>get grid initialization status </para>        </briefdescription>
        <detaileddescription>
<para>This method allows you to learn whether the Grid has been successfully initialized and is ready to accept jobs. This entails both, login in as a specific user on the Grid connection point, and activating the proxy with your passphrase.</para><para>The reason for the two step process is that in order to activate the grid you need to identify yourself using a grid certificate emitted by a CA. But to activate it you need an account on a grid access machine, which is open by any local administrator. Since this account is not under the central CA control, we can&apos;t trust it to submit jobs and require a proxy-initialization with an appropriate passphrase.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $eg = new Grid;</computeroutput> </para><para><computeroutput> $eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>; if ($eg-&gt;<ref refid="classGrid_1a9" kindref="member">get_init_status()</ref> == FALSE) echo &quot;Couldn&apos;t initialize the Grid!\n&quot;; </computeroutput> </para><para><simplesect kind="return"><para>bool TRUE if the grid has been initialized, FALSE otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="732" bodystart="731" bodyend="738"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::connect</definition>
        <argsstring>()</argsstring>
        <name>connect</name>
        <briefdescription>
<para>open a persistent connection to the Grid UI server </para>        </briefdescription>
        <detaileddescription>
<para>The Grid User Interface Server is the entry point to the Grid for users and user applications. This is where jobs are launched from.</para><para>This package has been designed to be able to be installed in any host, independent of whether it is an UI or not. Thus, to be able to submit jobs to the Grid, the server hosting the Web UI must connect to a Grid UI host to do the work.</para><para>This routine opens a connection to a Grid UI host using an specified username (i.e. all jobs will be run under said username).</para><para>The panorama therefore will look like this:</para><para>HTML front-end --&gt; processor.php &lt;--&gt; SSH &lt;--&gt; remote host &lt;--&gt; Grid</para><para>This allows for better resilience: should a GridUI host be unavailable, we can detect the error condition and try another one. If the GridUI runs the front-end, then we have a single point of failure, which is a no-no.</para><para>Sample usage: <computeroutput> require_once &apos;./grid_config.php&apos;; require_once &apos;./ssh.php&apos;; require_once &apos;./grid.php&apos;;</computeroutput> </para><para><computeroutput> $eg = new Grid;</computeroutput> </para><para><computeroutput> $eg-&gt;pconnect(); if ($eg-&gt;<ref refid="classGrid_1a8" kindref="member">get_connection_status()</ref> == FALSE) echo &quot;Couldn&apos;t instantiate a new Grid!\n&quot;; </computeroutput> </para><para><simplesect kind="note"><para>Use files instead of pipes and open them after securing thew connection: this should do with deadlocks and leave a trace log.</para></simplesect>
<simplesect kind="return"><para>TRUE on success, FALSE otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="789" bodystart="788" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::initialize</definition>
        <argsstring>($hours=12, $minutes=0)</argsstring>
        <name>initialize</name>
        <param>
          <type>$</type>
          <declname>hours</declname>
          <defval>12</defval>
        </param>
        <param>
          <type>$</type>
          <declname>minutes</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Start the Grid services. </para>        </briefdescription>
        <detaileddescription>
<para>This function starts the grid services on the remote UI server host. This is done by unlocking the certificate that we are going to use to run our jobs on the grid using the passphrase provided.</para><para>Grid services have a lifetime of their own. By default they are available for 12:00 hours (that&apos;s the default value of grid-proxy-init itself), but their duration may be fine tuned if we have some knowledge about the time required to run our job.</para><para>Grid opening time is specified in hours+minutes. If the number of minutes is negative, the specified minutes are substracted from the specified hours (e.g: 1, -15 is fifteen minutes to one hour, i.e. 45 minutes). If the total time specified is negative then the default of 12:00 is used.</para><para><ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> enables the grid for a specified amount of time (by default 12:00h). This means that during the validity period, the user on the Grid-UI host may access the grid, in the same or different logins. The validity period SURVIVES after we close all communications with the remote grid entry point for as long as we have specified (so our jobs may continue running).</para><para>If Grid access was already available (by a previous call to <ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref>) when we issue the call, then it is reused and extended to acommodate the newly requested validity period. In other words, the Grid access is shared among all logins during its lifetime.</para><para>This also means that if a valid certificate has been issued and not expired yet (another call to <ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> is still valid), then we may submit jobs to the Grid without any need to call <ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> ourselves.</para><para>E.g., say you have a web-based service that runs a long job and you want to have the grid enabled 12h (the default). You just call <ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> and then submit the job.</para><para>Now say that before it expires, someone logs in on your account but shouldn&apos;t have access to the Grid (i.e. they don&apos;t know the Grid-activation passphrase). Since the grid is already activated, they CAN submit jobs on your behalf even if they should not.</para><para>Therefore, <bold>DO NOT SHARE YOUR ACCOUNT ON THE GRID-UI WITH ANYBODY</bold> . Protect it as dearly as your Grid certificate.</para><para>It also means that debugging may be somewhat convoluted, as a call to <ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> may fail and jobs could still be accepted if another call from some other process is still valid. While debugging, it is better if you review the command output and make sure it shows how the call fared.</para><para>So, what happens if we destroy a session? See <ref refid="classGrid_1a12" kindref="member">Grid::destroy()</ref> for more details.</para><para>Sample usage: <computeroutput> $eg = new Grid; $eg-&gt;set_user($user); $eg-&gt;set_host($host); $eg-&gt;set_password($passwd); $eg-&gt;set_passphrase($passphrase); $eg-&gt;set_work_dir(&quot;/tmp/grid/test/cless&quot;); $eg-&gt;set_error_log(&quot;/tmp/grid/test/cless/connection.err&quot;); $eg-&gt;<ref refid="classGrid_1a10" kindref="member">connect()</ref>; if (!$eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>) echo &quot;error: couldn&apos;t init the grid\n&quot;; else echo &quot;OK\n&quot;; $eg-&gt;<ref refid="classGrid_1a12" kindref="member">destroy()</ref>; $eg-&gt;disconnect(); </computeroutput> </para><para><simplesect kind="note"><para>the output of the grid initialization command will go to <bold>our</bold>  standard output (i.e. the web server)!</para></simplesect>
</para><para><xrefsect id="bug_1_bug000002"><xreftitle>Bug</xreftitle><xrefdescription><para>: XXX JR XXX grid-proxy-init will use the time from the last issued command. To avoid setting a time shorter than one already existing we should first issue a grid-proxy-info, check if there is a running proxy, its time left, see if it is longer than what we want to set and if it is, then do NOTHING to avoid setting it shorter. </para></xrefdescription></xrefsect><parameterlist kind="param"><parametername>integer</parametername>
<parameterdescription>
<para>Estimated duration in hours of the session</para></parameterdescription><parametername>integer</parametername>
<parameterdescription>
<para>Estimated duration in minutes of the session</para></parameterdescription></parameterlist>
<simplesect kind="return"><para>bool TRUE on success, FALSE otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="904" bodystart="903" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
<para>Destroy remote grid identity. </para>        </briefdescription>
        <detaileddescription>
<para>Destroy the certification we initialized so that no more jobs can be launched under our identity.</para><para>This may be called even if we haven&apos;t called &apos;Grid::initialize()&apos; because there may exits a previous activation that is still valid and we want to destroy it.</para><para>To make things clear:</para><para><ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> &quot;opens&quot; the &quot;door&quot; to the Grid for <emphasis>the user</emphasis>  during a given time. New calls from the same user in this or any other login session, from this or any other site, while the &quot;door&quot; is open, share the same &quot;door&quot; and simply extend its validity period.</para><para><ref refid="classGrid_1a12" kindref="member">Grid::destroy()</ref> &quot;closes&quot; the currently open door. If the door was being shared by more login sessions, it is closed for <emphasis>all</emphasis>  of them, not just the caller, and hence nor the caller, nor <emphasis>any process</emphasis>  under the same user will be able to use the grid any longer unless <ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> is called again to open the door again (issue a new certificate).</para><para>In other words, you don&apos;t close <emphasis>a</emphasis>  Grid &quot;door&quot;, you close <emphasis>the</emphasis>  Grid &quot;door&quot;, and if it casually is being shared with other work sessions, then ALL of them will be destroyed (meaning that other active work sessions will fail).</para><para>Thus: be careful when using this method. Be <bold>very careful</bold> .</para><para>Sessions should be initiated using a validity length that you guesstimate will be comfortably enough for running all your work and left to expire by themselves.</para><para><ref refid="classGrid_1a12" kindref="member">Grid::destroy()</ref> should only be called when you are sure that you don&apos;t want <emphasis>any</emphasis>  work on the Grid to be accepted on your behalf, neither from this not other work sessions.</para><para>So, in general, it is better to make good estimations of the time needed by your jobs and specify it to <ref refid="classGrid_1a11" kindref="member">Grid::initialize()</ref> and not use <ref refid="classGrid_1a12" kindref="member">Grid::destroy()</ref> unless there are good reasons.</para><para>Sample usage: <computeroutput> $eg = new Grid; $eg-&gt;set_user($user); $eg-&gt;set_host($host); $eg-&gt;set_password($passwd); $eg-&gt;set_passphrase($passphrase); $eg-&gt;set_work_dir(&quot;/tmp/grid/test/cless&quot;); $eg-&gt;set_error_log(&quot;/tmp/grid/test/cless/connection.err&quot;); if (!$eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>) echo &quot;error: couldn&apos;t init the grid\n&quot;; else echo &quot;OK&quot;; $eg-&gt;<ref refid="classGrid_1a12" kindref="member">destroy()</ref>; $eg-&gt;disconnect(); </computeroutput> </para><para><simplesect kind="note"><para>Be careful when using this function: as it destroys our Grid-ID, no more work will be able to be executed on the grid on our behalf. In other words, please, make sure there is no work pending and that all your work has terminated before destroying your Grid-ID.</para></simplesect>
<simplesect kind="return"><para>bool TRUE on success, FALSE on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="1036" bodystart="1035" bodyend="1058"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::session_new</definition>
        <argsstring>($hint=&quot;sess&quot;)</argsstring>
        <name>session_new</name>
        <param>
          <type>$</type>
          <declname>hint</declname>
          <defval>&quot;sess&quot;</defval>
        </param>
        <briefdescription>
<para>Create a new session. </para>        </briefdescription>
        <detaileddescription>
<para>We take control of the session system: in a previous incarnation we got the session name from the user. This is dangerous since we can not avoid clashes even with random session names provided by a user: a randomly generated name may be guaranteed unique within the user&apos;s local host namespace, but should various calls come from different hosts (e.g. HA front-ends in a cluster), it is conceivable (although improbable) that both come up with the same random number and generate a clash on the shared remote grid access point. Hence the new approach: to be true, users do not need to generate a session name themselves: they just need a way to refer to them.</para><para>This routine will generate a new session: under a given session, we guarantee that processes will be run under an isolated sandbox where non name clashes from other concurrent users will occur. Name clashes within a given session induced by the user are still the responsability of the user.</para><para>SESSIONS</para><para>The basic idea is as follows: if you are developing a service that may be called concurrently by various users, your problem at the GrUI is the same as on your local server: avoiding name clashes for jobs. As long as you manage that locally using unique names, the same will work on the UI server.</para><para>This however may be inconvenient at times. It is usually the case when your service is not composed by a single job, but by many independent jobs that may be run concurrently as well. You still need to generate unique names for each sub-job, but if they are produced within a local uniquely named service-instance, then you may reuse the sub-job names for each instance.</para><para>This comes handy in the case of many sub-jobs: as long as the main service instance is uniquely identified, contained sub-jobs may have significant names that are easier to identify than randomly-generated ones: e.g. <preformatted>
    user A -&gt; service-instance-A -+-&gt; sub-job-1
                                  |
                                  +-&gt; sub-job-2
                                  |
                                  etc...</preformatted> </para><para><preformatted>    user B -&gt; service-instance-B -+-&gt; sub-job-1
                                  |
                                  +-&gt; sub-job-2
                                  |
                                  etc...
 </preformatted>  In this case, since the service-instances have unique names (A, B) we may use the same naming strategy in both cases for naming sub-jobs (1, 2,...) which makes bookkeeping a lot easier.</para><para>To reproduce a similar behaviour remotely we provide &apos;sessions&apos;.</para><para>Basically, what you are doing in the local case is isolating all the equally named jobs of each service-instance within an unique sandbox. In the grid you get the same result using &apos;sessions&apos;: whenever you want to submit a series of non-randomly-named jobs (or even a single one) you first allocate a session, and then attach those jobs to the session. Job names within a session are guaranteed not to clash with equal job names from another session.</para><para>Note the &apos;non-randomly-named&apos; tag above: you want to use sessions ALWAYS that you use any non-random job name unless you can guarantee it will be the only job with that name ON THE GRID.</para><para>This is an important notice: your job may have a non-random, but guaranteed unique name on your local host. And as long as the job will only be submitted from your local host it is OK. But if you are going to share your tools with other fellows, then they will install them locally and submit a similarly named job as well. The job name will be unique within each one&apos;s local machine, but when jobs are collected at the GrUI, they will all have the same name, which is a no-no.</para><para>USING SESSIONS</para><para>Once you see the need for using sessions, using them is quite simple: you call this function asking for a new session to be created on the remote grid access point on your behalf. The routine will return a unique session identifier which you later use to tag jobs that are to be run within that session&apos;s sandbox.</para><para>Sample usage: <computeroutput> $eg = new Grid; $eg-&gt;set_user($user); $eg-&gt;set_host($host); $eg-&gt;set_password($passwd); $eg-&gt;set_passphrase($passphrase); $eg-&gt;set_work_dir(&quot;/tmp/grid/debug&quot;); $eg-&gt;set_error_log(&quot;/tmp/grid/debug/connection.err&quot;); echo &quot;initializing grid... &quot;; if (!$eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>) { echo &quot;error: couldn&apos;t init the grid\n&quot;; exit; } else echo &quot;OK\n&quot;; echo &quot;Submitting tst-job to default session...\n&quot;; $out = array(&quot;&quot;); if (! $eg-&gt;job_submit(&quot;tst-job&quot;, $out)) { echo &quot;error: coudn&apos;t start the job\n&quot;; exit; } else echo &quot;OK\n&quot;; print_r($out); echo &quot;Submitting tst-job to a new session...\n&quot;; $sess = $eg-&gt;<ref refid="classGrid_1a13" kindref="member">session_new()</ref>; echo &quot;sess = &quot;; print_r($sess); echo &quot;\n&quot;; if ($sess != FALSE) { $out = array(&quot;&quot;); if (! $eg-&gt;job_submit(&quot;tst-job&quot;, $out, $sess)) echo &quot;error: coudn&apos;t start the job\n&quot;; else { echo &quot;OK\n&quot;; } $eg-&gt;session_destroy($sess); } $eg-&gt;<ref refid="classGrid_1a1" kindref="member">destruct()</ref>; </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>$hint an optional string to be used for the session name</para></parameterdescription></parameterlist>
<simplesect kind="return"><para>string|false session ID of the newly generated session. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="1192" bodystart="1191" bodyend="1243"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::session_define</definition>
        <argsstring>($session, $directory)</argsstring>
        <name>session_define</name>
        <param>
          <type>$</type>
          <declname>session</declname>
        </param>
        <param>
          <type>$</type>
          <declname>directory</declname>
        </param>
        <briefdescription>
<para>Define an already existing session. </para>        </briefdescription>
        <detaileddescription>
<para>This is useful if the session already exists and we want to access it: we already know its directory name, and just want to associate a new name with the existing directory name.</para><para>Use e.g. when you are to submit a job from a WWW page and access the results from a different one: as the new page has no access to the status of the previous one, we need to rebuild it ourselves.</para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>session name </para></parameterdescription><parametername>string</parametername>
<parameterdescription>
<para>subdirectory of $work_dir to be associated to that name </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="1262" bodystart="1261" bodyend="1264"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::session_is_valid</definition>
        <argsstring>($session=&apos;default&apos;)</argsstring>
        <name>session_is_valid</name>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>check if supplied argument is a valid (existing and active) session. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>a session name </para></parameterdescription></parameterlist>
<simplesect kind="return"><para>bool TRUE if the session could be found among the list of valid sessions, FALSE otherwise</para></simplesect>
private </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="1277" bodystart="1276" bodyend="1285"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::session_directory</definition>
        <argsstring>($session=&apos;default&apos;)</argsstring>
        <name>session_directory</name>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>return the directory associated to a session </para>        </briefdescription>
        <detaileddescription>
<para>DOES NO ERROR CHECKING FOR VALID SESSION</para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>a session name </para></parameterdescription></parameterlist>
<simplesect kind="return"><para>string the associated directory name</para></simplesect>
private </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="1298" bodystart="1297" bodyend="1301"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::session_list_all</definition>
        <argsstring>()</argsstring>
        <name>session_list_all</name>
        <briefdescription>
<para>list all existing sessions (debugging only) </para>        </briefdescription>
        <detaileddescription>
<para>private </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="1310" bodystart="1309" bodyend="1317"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
        <references refid="classGrid_1a10" compoundref="src_2grid_8php" startline="788" endline="806">connect</references>
        <references refid="classGrid_1a15" compoundref="src_2grid_8php" startline="1279" endline="1288">session_is_valid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::session_destroy</definition>
        <argsstring>($session=&apos;default&apos;)</argsstring>
        <name>session_destroy</name>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>destroy the specified session </para>        </briefdescription>
        <detaileddescription>
<para>This method destroys all data associated with the specified session. Currently it does not kill its associated jobs, but deleted all their underlying data nevertheless.</para><para>Warning: passing an empty string or no argument will destroy the default session.</para><para>return bool TRUE if success, FALSE otherwise </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="1332" bodystart="1331" bodyend="1357"/>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::session_destroy_all</definition>
        <argsstring>()</argsstring>
        <name>session_destroy_all</name>
        <briefdescription>
<para>Destroy all existing sessions. </para>        </briefdescription>
        <detaileddescription>
<para>private </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="1365" bodystart="1364" bodyend="1388"/>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::job_submit_set_timeout</definition>
        <argsstring>($seconds=0)</argsstring>
        <name>job_submit_set_timeout</name>
        <param>
          <type>$</type>
          <declname>seconds</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set maximum (guesstimated) allowed time for a job submission to succeed. </para>        </briefdescription>
        <detaileddescription>
<para>This value is application and dataset dependent, will be of relevance in rare occasions (1/4000) and hence may as well be generous.</para><para>The default is 0 seconds (no timeout). You should make measures to ensure it is reasonable. If set to 0, no timeout will be used.</para><para>Unless set to 0, you will need to code some resubmission policy in your application.</para><para><parameterlist kind="param"><parametername>integer</parametername>
<parameterdescription>
<para>$seconds timeout in seconds for job submission (defaults to 0, no timeout). </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="1408" bodystart="1407" bodyend="1410"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
        <references refid="classGrid_1a15" compoundref="src_2grid_8php" startline="1279" endline="1288">session_is_valid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::job_submit</definition>
        <argsstring>($job, &amp;$out, $session=&apos;default&apos;)</argsstring>
        <name>job_submit</name>
        <param>
          <type>$</type>
          <declname>job</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>out</declname>
        </param>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>submit a job to the grid </para>        </briefdescription>
        <detaileddescription>
<para>This procedure submits a job to the Grid, optionally tagging it as part of a specific session.</para><para>A job must be stored in a single directory (whose name you provide in the call to this function). The directory must contain any executables, libraries, configuration files/scripts, and input data needed to run your job.</para><para>In addition, there must be a JDL file called &apos;job.jdl&apos; and describing the job to the grid using the JDL language.</para><para>Please note that only the job-directory name is used. If you provide a longer path, only the last component (the job directory name) will be used to identify your job remotely.</para><para>Sample usage: <computeroutput> $eg = new Grid; $eg-&gt;set_user($user); $eg-&gt;set_host($host); $eg-&gt;set_password($passwd); $eg-&gt;set_passphrase($passphrase); $eg-&gt;set_work_dir(&quot;/tmp/grid/test/cless&quot;); $eg-&gt;set_error_log(&quot;/tmp/grid/test/cless/connection.err&quot;); echo &quot;initializing grid... &quot;; if (!$eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>) echo &quot;error: couldn&apos;t init the grid\n&quot;; else echo &quot;OK\n&quot;; echo &quot;Submitting tst-job... &quot;; if (! $eg-&gt;job_submit(&quot;tst-job&quot;, $out)) echo &quot;error: coudn&apos;t start the job\n&quot;; else echo &quot;OK\n&quot;; print_r($out); $eg-&gt;<ref refid="classGrid_1a12" kindref="member">destroy()</ref>; $eg-&gt;disconnect(); </computeroutput> </para><para><simplesect kind="note"><para>in future instances we may provide routines to generate the JDL, possibly within a GridJob class of its own.</para></simplesect>
<parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>The name of the job (same as the subdirectory it is in) </para></parameterdescription><parametername>array</parametername>
<parameterdescription>
<para>A variable to hold any messages spitted by the submission procedure. Messages will be stored as an array of strings (one per line) without ending newlines. </para></parameterdescription><parametername>string</parametername>
<parameterdescription>
<para>Optional name of the session to which this job belongs (obtained from a previous call to session_new). </para></parameterdescription></parameterlist>
<simplesect kind="return"><para>bool TRUE if success, FALSE otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="1466" bodystart="1465" bodyend="1554"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::job_get_id</definition>
        <argsstring>($job, $session=&apos;default&apos;)</argsstring>
        <name>job_get_id</name>
        <param>
          <type>$</type>
          <declname>job</declname>
        </param>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>Get Grid ID of a submitted job. </para>        </briefdescription>
        <detaileddescription>
<para>You should not need this function normally. The job and session names you already have should actually be enough for all your needs. The function is needed internally by the class, but otherwise it should be of little interest.</para><para>Nevertheless, you may want to have access to this knowledge, either out of curiosity or for other reasons (e.g. re-routing access to a job through other access points after a crash of the original access point you used to submit it).</para><para>Indeed, this will come handy for newer releases of this class when disaster recovery is added. Meanwhile, as already said, it is of little use.</para><para>Sample usage: <computeroutput> $eg = new Grid; $eg-&gt;set_user($user); $eg-&gt;set_host($host); $eg-&gt;set_password($passwd); $eg-&gt;set_passphrase($passphrase); $eg-&gt;set_work_dir(&quot;/tmp/grid/test/cless&quot;); $eg-&gt;set_error_log(&quot;/tmp/grid/test/cless/connection.err&quot;); echo &quot;initializing grid... &quot;; if (!$eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>) echo &quot;error: couldn&apos;t init the grid\n&quot;; else echo &quot;OK\n&quot;; echo &quot;Submitting tst-job... &quot;; if (! $eg-&gt;job_submit(&quot;tst-job&quot;, $out)) echo &quot;error: coudn&apos;t start the job\n&quot;; else echo &quot;OK\n&quot;; print_r($out); print_r($eg-&gt;job_get_id(&quot;tst-job&quot;)); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>The name of the job you submitted to the grid </para></parameterdescription><parametername>string</parametername>
<parameterdescription>
<para>Optionally identifies the session to which the job belongs (if it was submitted within one).</para></parameterdescription></parameterlist>
<simplesect kind="return"><para>array|false with the known job-id&apos;s submitted from this &apos;job&apos;. That looks as an oxymoron: there should only be one. Ergo, you may use it to detect job name clashes or job re-submissions.</para></simplesect>
<simplesect kind="note"><para>this is nasty and should be enhanced on a future version. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="1608" bodystart="1607" bodyend="1674"/>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::job_status</definition>
        <argsstring>($job, &amp;$out, $session=&apos;default&apos;)</argsstring>
        <name>job_status</name>
        <param>
          <type>$</type>
          <declname>job</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>out</declname>
        </param>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>check job status </para>        </briefdescription>
        <detaileddescription>
<para>This routine retrieves the job status report from the remote grid entry point into your local job directory, and returns the status of your specified job/session.</para><para>Sample usage: <computeroutput> $eg = new Grid; $eg-&gt;set_user($user); $eg-&gt;set_host($host); $eg-&gt;set_password($passwd); $eg-&gt;set_passphrase($passphrase); $eg-&gt;set_work_dir(&quot;/tmp/grid/test/cless&quot;); $eg-&gt;set_error_log(&quot;/tmp/grid/test/cless/connection.err&quot;); echo &quot;initializing grid... &quot;; if (!$eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>) echo &quot;error: couldn&apos;t init the grid\n&quot;; else echo &quot;OK\n&quot;; echo &quot;Submitting tst-job... &quot;; if (! $eg-&gt;job_submit(&quot;tst-job&quot;, $out)) echo &quot;error: coudn&apos;t start the job\n&quot;; else echo &quot;OK\n&quot;; print_r($out); echo &quot;\nGetting job ID... \n&quot;; print_r($eg-&gt;job_get_id(&quot;tst-job&quot;)); echo &quot;\nGetting job status... \n&quot;; print_r($eg-&gt;job_status(&quot;tst-job&quot;, $out)); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>The name of the job you submitted to the grid </para></parameterdescription><parametername>string</parametername>
<parameterdescription>
<para>Output of the status request program. Useful for debugging. </para></parameterdescription><parametername>string</parametername>
<parameterdescription>
<para>Optionally identifies the session to which the job belongs (if it was submitted within one).</para></parameterdescription></parameterlist>
<simplesect kind="return"><para>array|false an array containing the job status or FALSE on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="1719" bodystart="1718" bodyend="1789"/>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::job_get_output</definition>
        <argsstring>($job, &amp;$out, $session=&apos;default&apos;)</argsstring>
        <name>job_get_output</name>
        <param>
          <type>$</type>
          <declname>job</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>out</declname>
        </param>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>retrieve results </para>        </briefdescription>
        <detaileddescription>
<para>Retrieve the results of a job from the Grid. This function will attempt to retrieve the results of a job. This relies on the results being already available, i.e. you better check the job status first and make sure it has completed.</para><para>If you don&apos;t, and the job hasn&apos;t completed yet, don&apos;t worry: nothing will be retrieved. So, no harm done. But you should check stdout to verify the condition.</para><para>All results will be stored remotely on the job directory, under a subdirectory with a unique name of the form $grid_user_name_XXXXX... where the X&apos;s mean a random string. Locally you will see them as $job/job_output so that they have an easy name to identify them.</para><para>To access your job output, just open this $job/output directory and look inside.</para><para>The rationale for this is to avoid overwriting your job information with its output. If that was intended, nothing is lost, just pick-up the newly generated file. This way you always have continued access to your old, submitted data for checking.</para><para>Sample usage: <computeroutput> $eg = new Grid; $eg-&gt;set_user($user); $eg-&gt;set_host($host); $eg-&gt;set_password($passwd); $eg-&gt;set_passphrase($passphrase); $eg-&gt;set_work_dir(&quot;/tmp/grid/test/cless&quot;); $eg-&gt;set_error_log(&quot;/tmp/grid/test/cless/connection.err&quot;); echo &quot;initializing grid... &quot;; if (!$eg-&gt;<ref refid="classGrid_1a11" kindref="member">initialize()</ref>) echo &quot;error: couldn&apos;t init the grid\n&quot;; else echo &quot;OK\n&quot;; echo &quot;Submitting tst-job... &quot;; if (! $eg-&gt;job_submit(&quot;tst-job&quot;, $out)) echo &quot;error: coudn&apos;t start the job\n&quot;; else echo &quot;OK\n&quot;; print_r($out); echo &quot;\nGetting job ID... \n&quot;; print_r($eg-&gt;job_get_id(&quot;tst-job&quot;)); echo &quot;\nGetting job status... \n&quot;; print_r($eg-&gt;job_status(&quot;tst-job&quot;, $out)); echo &quot;\nGetting job output... &quot;; if (! $eg-&gt;job_get_output(&quot;tst-job&quot;, $out)) echo &quot;error: couldn&apos;t get job output\n&quot;; else echo &quot;OK\n&quot;; print_r($out); </computeroutput> </para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>The name of the job you submitted to the grid </para></parameterdescription><parametername>string</parametername>
<parameterdescription>
<para>Optionally identifies the session to which the job belongs (if it was submitted within one). If this is not specified, then the default session is used. </para></parameterdescription></parameterlist>
<simplesect kind="return"><para>bool TRUE on success, FALSE on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="1855" bodystart="1854" bodyend="1929"/>
        <references refid="grid__test_8php_1a0" compoundref="grid__test_8php" startline="265">$debug_grid</references>
      </memberdef>
      <memberdef kind="function" id="classGrid_1a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Grid::job_cancel</definition>
        <argsstring>($job, &amp;$out, $session=&apos;default&apos;)</argsstring>
        <name>job_cancel</name>
        <param>
          <type>$</type>
          <declname>job</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>out</declname>
        </param>
        <param>
          <type>$</type>
          <declname>session</declname>
          <defval>&apos;default&apos;</defval>
        </param>
        <briefdescription>
<para>Cancel a job previously submitted to the grid. </para>        </briefdescription>
        <detaileddescription>
<para>Note: If the job has not reached the CE yet (i.e.: its status is WAITING or READY states), the cancellation request may be ignored, and the job may continue running, although a message of successful cancellation is returned to the user. In such cases, just cancel the job again when its status is SCHEDULED or RUNNING</para><para><parameterlist kind="param"><parametername>string</parametername>
<parameterdescription>
<para>The name of the job you submitted to the grid </para></parameterdescription><parametername>string</parametername>
<parameterdescription>
<para>Optionally identifies the session to which the job belongs (if it was submitted within one). If this is not specified, then the default session is used. </para></parameterdescription></parameterlist>
<simplesect kind="return"><para>bool TRUE on success, FALSE on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/test/grid.php" line="1947" bodystart="1946" bodyend="1974"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classGrid_1o0" prot="public" static="no" volatile="no" mutable="no">
        <type></type>
        <definition>Grid::$entry_point</definition>
        <argsstring></argsstring>
        <name>$entry_point</name>
        <briefdescription>
<para>the grid entry point, should not be needed </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="267" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGrid_1o1" prot="public" static="no" volatile="no" mutable="no">
        <type></type>
        <definition>Grid::$username</definition>
        <argsstring></argsstring>
        <name>$username</name>
        <briefdescription>
<para>user name to use to connect to the grid </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="269" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGrid_1o2" prot="public" static="no" volatile="no" mutable="no">
        <type></type>
        <definition>Grid::$hostname</definition>
        <argsstring></argsstring>
        <name>$hostname</name>
        <briefdescription>
<para>name of host that provides access to the grid </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="271" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGrid_1o3" prot="public" static="no" volatile="no" mutable="no">
        <type></type>
        <definition>Grid::$password</definition>
        <argsstring></argsstring>
        <name>$password</name>
        <briefdescription>
<para>password to login on the UI node </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="273" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGrid_1o4" prot="public" static="no" volatile="no" mutable="no">
        <type></type>
        <definition>Grid::$passphrase</definition>
        <argsstring></argsstring>
        <name>$passphrase</name>
        <briefdescription>
<para>key to unlock the grid access certificate </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="275" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGrid_1o5" prot="public" static="no" volatile="no" mutable="no">
        <type></type>
        <definition>Grid::$work_dir</definition>
        <argsstring></argsstring>
        <name>$work_dir</name>
        <briefdescription>
<para>a GrUI directory where we can work </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="277" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGrid_1o6" prot="public" static="no" volatile="no" mutable="no">
        <type></type>
        <definition>Grid::$error_log</definition>
        <argsstring></argsstring>
        <name>$error_log</name>
        <briefdescription>
<para>a local file to store the error log </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="279" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGrid_1o7" prot="public" static="no" volatile="no" mutable="no">
        <type></type>
        <definition>Grid::$std_in</definition>
        <argsstring></argsstring>
        <name>$std_in</name>
        <briefdescription>
<para>Standard input of the grid entry. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="287" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGrid_1o8" prot="public" static="no" volatile="no" mutable="no">
        <type></type>
        <definition>Grid::$std_out</definition>
        <argsstring></argsstring>
        <name>$std_out</name>
        <briefdescription>
<para>Standard output of the grid entry. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="289" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGrid_1o9" prot="public" static="no" volatile="no" mutable="no">
        <type></type>
        <definition>Grid::$std_err</definition>
        <argsstring></argsstring>
        <name>$std_err</name>
        <briefdescription>
<para>Standard error of the grid entry. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="291" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGrid_1o10" prot="public" static="no" volatile="no" mutable="no">
        <type></type>
        <definition>Grid::$connected</definition>
        <argsstring></argsstring>
        <name>$connected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="303" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGrid_1o11" prot="public" static="no" volatile="no" mutable="no">
        <type></type>
        <definition>Grid::$initialized</definition>
        <argsstring></argsstring>
        <name>$initialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="310" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGrid_1o12" prot="public" static="no" volatile="no" mutable="no">
        <type></type>
        <definition>Grid::$sessions</definition>
        <argsstring></argsstring>
        <name>$sessions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="317" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGrid_1o13" prot="public" static="no" volatile="no" mutable="no">
        <type></type>
        <definition>Grid::$sx</definition>
        <argsstring></argsstring>
        <name>$sx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="324" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGrid_1o14" prot="public" static="no" volatile="no" mutable="no">
        <type></type>
        <definition>Grid::$submit_timeout</definition>
        <argsstring></argsstring>
        <name>$submit_timeout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="376" bodystart="376" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/mnt/data/www/EMBnet/cgi-src/Grid/php::grid/src/grid.php" line="239" bodystart="239" bodyend="1978"/>
    <listofallmembers>
      <member refid="classGrid_1o10" prot="public" virt="non-virtual"><scope>Grid</scope><name>$connected</name></member>
      <member refid="classGrid_1o0" prot="public" virt="non-virtual"><scope>Grid</scope><name>$entry_point</name></member>
      <member refid="classGrid_1o6" prot="public" virt="non-virtual"><scope>Grid</scope><name>$error_log</name></member>
      <member refid="classGrid_1o2" prot="public" virt="non-virtual"><scope>Grid</scope><name>$hostname</name></member>
      <member refid="classGrid_1o11" prot="public" virt="non-virtual"><scope>Grid</scope><name>$initialized</name></member>
      <member refid="classGrid_1o4" prot="public" virt="non-virtual"><scope>Grid</scope><name>$passphrase</name></member>
      <member refid="classGrid_1o3" prot="public" virt="non-virtual"><scope>Grid</scope><name>$password</name></member>
      <member refid="classGrid_1o12" prot="public" virt="non-virtual"><scope>Grid</scope><name>$sessions</name></member>
      <member refid="classGrid_1o9" prot="public" virt="non-virtual"><scope>Grid</scope><name>$std_err</name></member>
      <member refid="classGrid_1o7" prot="public" virt="non-virtual"><scope>Grid</scope><name>$std_in</name></member>
      <member refid="classGrid_1o8" prot="public" virt="non-virtual"><scope>Grid</scope><name>$std_out</name></member>
      <member refid="classGrid_1o14" prot="public" virt="non-virtual"><scope>Grid</scope><name>$submit_timeout</name></member>
      <member refid="classGrid_1o13" prot="public" virt="non-virtual"><scope>Grid</scope><name>$sx</name></member>
      <member refid="classGrid_1o1" prot="public" virt="non-virtual"><scope>Grid</scope><name>$username</name></member>
      <member refid="classGrid_1o5" prot="public" virt="non-virtual"><scope>Grid</scope><name>$work_dir</name></member>
      <member refid="classGrid_1a10" prot="public" virt="non-virtual"><scope>Grid</scope><name>connect</name></member>
      <member refid="classGrid_1a36" prot="public" virt="non-virtual"><scope>Grid</scope><name>connect</name></member>
      <member refid="classGrid_1a12" prot="public" virt="non-virtual"><scope>Grid</scope><name>destroy</name></member>
      <member refid="classGrid_1a38" prot="public" virt="non-virtual"><scope>Grid</scope><name>destroy</name></member>
      <member refid="classGrid_1a1" prot="public" virt="non-virtual"><scope>Grid</scope><name>destruct</name></member>
      <member refid="classGrid_1a27" prot="public" virt="non-virtual"><scope>Grid</scope><name>destruct</name></member>
      <member refid="classGrid_1a8" prot="public" virt="non-virtual"><scope>Grid</scope><name>get_connection_status</name></member>
      <member refid="classGrid_1a34" prot="public" virt="non-virtual"><scope>Grid</scope><name>get_connection_status</name></member>
      <member refid="classGrid_1a9" prot="public" virt="non-virtual"><scope>Grid</scope><name>get_init_status</name></member>
      <member refid="classGrid_1a35" prot="public" virt="non-virtual"><scope>Grid</scope><name>get_init_status</name></member>
      <member refid="classGrid_1a0" prot="public" virt="non-virtual"><scope>Grid</scope><name>Grid</name></member>
      <member refid="classGrid_1a26" prot="public" virt="non-virtual"><scope>Grid</scope><name>Grid</name></member>
      <member refid="classGrid_1a11" prot="public" virt="non-virtual"><scope>Grid</scope><name>initialize</name></member>
      <member refid="classGrid_1a37" prot="public" virt="non-virtual"><scope>Grid</scope><name>initialize</name></member>
      <member refid="classGrid_1a25" prot="public" virt="non-virtual"><scope>Grid</scope><name>job_cancel</name></member>
      <member refid="classGrid_1a51" prot="public" virt="non-virtual"><scope>Grid</scope><name>job_cancel</name></member>
      <member refid="classGrid_1a22" prot="public" virt="non-virtual"><scope>Grid</scope><name>job_get_id</name></member>
      <member refid="classGrid_1a48" prot="public" virt="non-virtual"><scope>Grid</scope><name>job_get_id</name></member>
      <member refid="classGrid_1a24" prot="public" virt="non-virtual"><scope>Grid</scope><name>job_get_output</name></member>
      <member refid="classGrid_1a50" prot="public" virt="non-virtual"><scope>Grid</scope><name>job_get_output</name></member>
      <member refid="classGrid_1a23" prot="public" virt="non-virtual"><scope>Grid</scope><name>job_status</name></member>
      <member refid="classGrid_1a49" prot="public" virt="non-virtual"><scope>Grid</scope><name>job_status</name></member>
      <member refid="classGrid_1a21" prot="public" virt="non-virtual"><scope>Grid</scope><name>job_submit</name></member>
      <member refid="classGrid_1a47" prot="public" virt="non-virtual"><scope>Grid</scope><name>job_submit</name></member>
      <member refid="classGrid_1a20" prot="public" virt="non-virtual"><scope>Grid</scope><name>job_submit_set_timeout</name></member>
      <member refid="classGrid_1a46" prot="public" virt="non-virtual"><scope>Grid</scope><name>job_submit_set_timeout</name></member>
      <member refid="classGrid_1a14" prot="public" virt="non-virtual"><scope>Grid</scope><name>session_define</name></member>
      <member refid="classGrid_1a40" prot="public" virt="non-virtual"><scope>Grid</scope><name>session_define</name></member>
      <member refid="classGrid_1a18" prot="public" virt="non-virtual"><scope>Grid</scope><name>session_destroy</name></member>
      <member refid="classGrid_1a44" prot="public" virt="non-virtual"><scope>Grid</scope><name>session_destroy</name></member>
      <member refid="classGrid_1a19" prot="public" virt="non-virtual"><scope>Grid</scope><name>session_destroy_all</name></member>
      <member refid="classGrid_1a45" prot="public" virt="non-virtual"><scope>Grid</scope><name>session_destroy_all</name></member>
      <member refid="classGrid_1a16" prot="public" virt="non-virtual"><scope>Grid</scope><name>session_directory</name></member>
      <member refid="classGrid_1a42" prot="public" virt="non-virtual"><scope>Grid</scope><name>session_directory</name></member>
      <member refid="classGrid_1a15" prot="public" virt="non-virtual"><scope>Grid</scope><name>session_is_valid</name></member>
      <member refid="classGrid_1a41" prot="public" virt="non-virtual"><scope>Grid</scope><name>session_is_valid</name></member>
      <member refid="classGrid_1a17" prot="public" virt="non-virtual"><scope>Grid</scope><name>session_list_all</name></member>
      <member refid="classGrid_1a43" prot="public" virt="non-virtual"><scope>Grid</scope><name>session_list_all</name></member>
      <member refid="classGrid_1a13" prot="public" virt="non-virtual"><scope>Grid</scope><name>session_new</name></member>
      <member refid="classGrid_1a39" prot="public" virt="non-virtual"><scope>Grid</scope><name>session_new</name></member>
      <member refid="classGrid_1a7" prot="public" virt="non-virtual"><scope>Grid</scope><name>set_error_log</name></member>
      <member refid="classGrid_1a33" prot="public" virt="non-virtual"><scope>Grid</scope><name>set_error_log</name></member>
      <member refid="classGrid_1a3" prot="public" virt="non-virtual"><scope>Grid</scope><name>set_host</name></member>
      <member refid="classGrid_1a29" prot="public" virt="non-virtual"><scope>Grid</scope><name>set_host</name></member>
      <member refid="classGrid_1a5" prot="public" virt="non-virtual"><scope>Grid</scope><name>set_passphrase</name></member>
      <member refid="classGrid_1a31" prot="public" virt="non-virtual"><scope>Grid</scope><name>set_passphrase</name></member>
      <member refid="classGrid_1a4" prot="public" virt="non-virtual"><scope>Grid</scope><name>set_password</name></member>
      <member refid="classGrid_1a30" prot="public" virt="non-virtual"><scope>Grid</scope><name>set_password</name></member>
      <member refid="classGrid_1a2" prot="public" virt="non-virtual"><scope>Grid</scope><name>set_user</name></member>
      <member refid="classGrid_1a28" prot="public" virt="non-virtual"><scope>Grid</scope><name>set_user</name></member>
      <member refid="classGrid_1a6" prot="public" virt="non-virtual"><scope>Grid</scope><name>set_work_dir</name></member>
      <member refid="classGrid_1a32" prot="public" virt="non-virtual"><scope>Grid</scope><name>set_work_dir</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
